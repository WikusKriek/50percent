{"version":3,"file":"workbox-d45b89cc.js","sources":["node_modules/workbox-core/_version.js","node_modules/workbox-core/_private/logger.js","node_modules/workbox-core/models/messages/messageGenerator.js","node_modules/workbox-core/_private/WorkboxError.js","node_modules/workbox-routing/_version.js","node_modules/workbox-routing/utils/constants.js","node_modules/workbox-routing/utils/normalizeHandler.js","node_modules/workbox-routing/Route.js","node_modules/workbox-routing/RegExpRoute.js","node_modules/workbox-core/_private/getFriendlyURL.js","node_modules/workbox-routing/Router.js","node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","node_modules/workbox-core/_private/cacheNames.js","node_modules/workbox-core/_private/dontWaitFor.js","node_modules/workbox-core/models/quotaErrorCallbacks.js","node_modules/workbox-core/_private/DBWrapper.js","node_modules/workbox-expiration/_version.js","node_modules/workbox-expiration/models/CacheTimestampsModel.js","node_modules/workbox-core/_private/deleteDatabase.js","node_modules/workbox-expiration/CacheExpiration.js","node_modules/workbox-core/utils/pluginUtils.js","node_modules/workbox-core/_private/cacheWrapper.js","node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","node_modules/workbox-core/_private/fetchWrapper.js","node_modules/workbox-strategies/_version.js","node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","node_modules/workbox-core/copyResponse.js","node_modules/workbox-precaching/_version.js","node_modules/workbox-precaching/utils/createCacheKey.js","node_modules/workbox-precaching/PrecacheController.js","node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","node_modules/workbox-precaching/utils/getCacheKeyForURL.js","node_modules/workbox-precaching/utils/generateURLVariations.js","node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","node_modules/workbox-precaching/addRoute.js","node_modules/workbox-precaching/utils/addFetchListener.js","node_modules/workbox-precaching/utils/precachePlugins.js","node_modules/workbox-precaching/precache.js","node_modules/workbox-expiration/ExpirationPlugin.js","node_modules/workbox-core/registerQuotaErrorCallback.js","node_modules/workbox-strategies/StaleWhileRevalidate.js","node_modules/workbox-precaching/precacheAndRoute.js","node_modules/workbox-routing/registerRoute.js","node_modules/workbox-core/setCacheNameDetails.js"],"sourcesContent":["\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:core:5.0.0'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst logger = (process.env.NODE_ENV === 'production' ? null : (() => {\r\n    // Don't overwrite this value if it's already set.\r\n    // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\r\n    if (!('__WB_DISABLE_DEV_LOGS' in self)) {\r\n        self.__WB_DISABLE_DEV_LOGS = false;\r\n    }\r\n    let inGroup = false;\r\n    const methodToColorMap = {\r\n        debug: `#7f8c8d`,\r\n        log: `#2ecc71`,\r\n        warn: `#f39c12`,\r\n        error: `#c0392b`,\r\n        groupCollapsed: `#3498db`,\r\n        groupEnd: null,\r\n    };\r\n    const print = function (method, args) {\r\n        if (self.__WB_DISABLE_DEV_LOGS) {\r\n            return;\r\n        }\r\n        if (method === 'groupCollapsed') {\r\n            // Safari doesn't print all console.groupCollapsed() arguments:\r\n            // https://bugs.webkit.org/show_bug.cgi?id=182754\r\n            if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\r\n                console[method](...args);\r\n                return;\r\n            }\r\n        }\r\n        const styles = [\r\n            `background: ${methodToColorMap[method]}`,\r\n            `border-radius: 0.5em`,\r\n            `color: white`,\r\n            `font-weight: bold`,\r\n            `padding: 2px 0.5em`,\r\n        ];\r\n        // When in a group, the workbox prefix is not displayed.\r\n        const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\r\n        console[method](...logPrefix, ...args);\r\n        if (method === 'groupCollapsed') {\r\n            inGroup = true;\r\n        }\r\n        if (method === 'groupEnd') {\r\n            inGroup = false;\r\n        }\r\n    };\r\n    const api = {};\r\n    const loggerMethods = Object.keys(methodToColorMap);\r\n    for (const key of loggerMethods) {\r\n        const method = key;\r\n        api[method] = (...args) => {\r\n            print(method, args);\r\n        };\r\n    }\r\n    return api;\r\n})());\r\nexport { logger };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { messages } from './messages.js';\r\nimport '../../_version.js';\r\nconst fallback = (code, ...args) => {\r\n    let msg = code;\r\n    if (args.length > 0) {\r\n        msg += ` :: ${JSON.stringify(args)}`;\r\n    }\r\n    return msg;\r\n};\r\nconst generatorFunction = (code, details = {}) => {\r\n    const message = messages[code];\r\n    if (!message) {\r\n        throw new Error(`Unable to find message for code '${code}'.`);\r\n    }\r\n    return message(details);\r\n};\r\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\r\n    fallback : generatorFunction;\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\r\nimport '../_version.js';\r\n/**\r\n * Workbox errors should be thrown with this class.\r\n * This allows use to ensure the type easily in tests,\r\n * helps developers identify errors from workbox\r\n * easily and allows use to optimise error\r\n * messages correctly.\r\n *\r\n * @private\r\n */\r\nclass WorkboxError extends Error {\r\n    /**\r\n     *\r\n     * @param {string} errorCode The error code that\r\n     * identifies this particular error.\r\n     * @param {Object=} details Any relevant arguments\r\n     * that will help developers identify issues should\r\n     * be added as a key on the context object.\r\n     */\r\n    constructor(errorCode, details) {\r\n        let message = messageGenerator(errorCode, details);\r\n        super(message);\r\n        this.name = errorCode;\r\n        this.details = details;\r\n    }\r\n}\r\nexport { WorkboxError };\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:routing:5.0.0'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * The default HTTP method, 'GET', used when there's no specific method\r\n * configured for a route.\r\n *\r\n * @type {string}\r\n *\r\n * @private\r\n */\r\nexport const defaultMethod = 'GET';\r\n/**\r\n * The list of valid HTTP methods associated with requests that could be routed.\r\n *\r\n * @type {Array<string>}\r\n *\r\n * @private\r\n */\r\nexport const validMethods = [\r\n    'DELETE',\r\n    'GET',\r\n    'HEAD',\r\n    'PATCH',\r\n    'POST',\r\n    'PUT',\r\n];\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport '../_version.js';\r\n/**\r\n * @param {function()|Object} handler Either a function, or an object with a\r\n * 'handle' method.\r\n * @return {Object} An object with a handle method.\r\n *\r\n * @private\r\n */\r\nexport const normalizeHandler = (handler) => {\r\n    if (handler && typeof handler === 'object') {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.hasMethod(handler, 'handle', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Route',\r\n                funcName: 'constructor',\r\n                paramName: 'handler',\r\n            });\r\n        }\r\n        return handler;\r\n    }\r\n    else {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(handler, 'function', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Route',\r\n                funcName: 'constructor',\r\n                paramName: 'handler',\r\n            });\r\n        }\r\n        return { handle: handler };\r\n    }\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { defaultMethod, validMethods } from './utils/constants.js';\r\nimport { normalizeHandler } from './utils/normalizeHandler.js';\r\nimport './_version.js';\r\n/**\r\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\r\n * The \"match\" callback determine if a route should be used to \"handle\" a\r\n * request by returning a non-falsy value if it can. The \"handler\" callback\r\n * is called when there is a match and should return a Promise that resolves\r\n * to a `Response`.\r\n *\r\n * @memberof module:workbox-routing\r\n */\r\nclass Route {\r\n    /**\r\n     * Constructor for Route class.\r\n     *\r\n     * @param {module:workbox-routing~matchCallback} match\r\n     * A callback function that determines whether the route matches a given\r\n     * `fetch` event by returning a non-falsy value.\r\n     * @param {module:workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resolving to a Response.\r\n     * @param {string} [method='GET'] The HTTP method to match the Route\r\n     * against.\r\n     */\r\n    constructor(match, handler, method = defaultMethod) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(match, 'function', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Route',\r\n                funcName: 'constructor',\r\n                paramName: 'match',\r\n            });\r\n            if (method) {\r\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\r\n            }\r\n        }\r\n        // These values are referenced directly by Router so cannot be\r\n        // altered by minificaton.\r\n        this.handler = normalizeHandler(handler);\r\n        this.match = match;\r\n        this.method = method;\r\n    }\r\n}\r\nexport { Route };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { Route } from './Route.js';\r\nimport './_version.js';\r\n/**\r\n * RegExpRoute makes it easy to create a regular expression based\r\n * [Route]{@link module:workbox-routing.Route}.\r\n *\r\n * For same-origin requests the RegExp only needs to match part of the URL. For\r\n * requests against third-party servers, you must define a RegExp that matches\r\n * the start of the URL.\r\n *\r\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\r\n *\r\n * @memberof module:workbox-routing\r\n * @extends module:workbox-routing.Route\r\n */\r\nclass RegExpRoute extends Route {\r\n    /**\r\n     * If the regular expression contains\r\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\r\n     * the captured values will be passed to the\r\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\r\n     * argument.\r\n     *\r\n     * @param {RegExp} regExp The regular expression to match against URLs.\r\n     * @param {module:workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resulting in a Response.\r\n     * @param {string} [method='GET'] The HTTP method to match the Route\r\n     * against.\r\n     */\r\n    constructor(regExp, handler, method) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(regExp, RegExp, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'RegExpRoute',\r\n                funcName: 'constructor',\r\n                paramName: 'pattern',\r\n            });\r\n        }\r\n        const match = ({ url }) => {\r\n            const result = regExp.exec(url.href);\r\n            // Return immediately if there's no match.\r\n            if (!result) {\r\n                return;\r\n            }\r\n            // Require that the match start at the first character in the URL string\r\n            // if it's a cross-origin request.\r\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\r\n            // behind this behavior.\r\n            if ((url.origin !== location.origin) && (result.index !== 0)) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.debug(`The regular expression '${regExp}' only partially matched ` +\r\n                        `against the cross-origin URL '${url}'. RegExpRoute's will only ` +\r\n                        `handle cross-origin requests if they match the entire URL.`);\r\n                }\r\n                return;\r\n            }\r\n            // If the route matches, but there aren't any capture groups defined, then\r\n            // this will return [], which is truthy and therefore sufficient to\r\n            // indicate a match.\r\n            // If there are capture groups, then it will return their values.\r\n            return result.slice(1);\r\n        };\r\n        super(match, handler, method);\r\n    }\r\n}\r\nexport { RegExpRoute };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst getFriendlyURL = (url) => {\r\n    const urlObj = new URL(String(url), location.href);\r\n    if (urlObj.origin === location.origin) {\r\n        return urlObj.pathname;\r\n    }\r\n    return urlObj.href;\r\n};\r\nexport { getFriendlyURL };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { normalizeHandler } from './utils/normalizeHandler.js';\r\nimport './_version.js';\r\n/**\r\n * The Router can be used to process a FetchEvent through one or more\r\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\r\n * a matching route exists.\r\n *\r\n * If no route matches a given a request, the Router will use a \"default\"\r\n * handler if one is defined.\r\n *\r\n * Should the matching Route throw an error, the Router will use a \"catch\"\r\n * handler if one is defined to gracefully deal with issues and respond with a\r\n * Request.\r\n *\r\n * If a request matches multiple routes, the **earliest** registered route will\r\n * be used to respond to the request.\r\n *\r\n * @memberof module:workbox-routing\r\n */\r\nclass Router {\r\n    /**\r\n     * Initializes a new Router.\r\n     */\r\n    constructor() {\r\n        this._routes = new Map();\r\n    }\r\n    /**\r\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\r\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\r\n     * instances that are registered.\r\n     */\r\n    get routes() {\r\n        return this._routes;\r\n    }\r\n    /**\r\n     * Adds a fetch event listener to respond to events when a route matches\r\n     * the event's request.\r\n     */\r\n    addFetchListener() {\r\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n        self.addEventListener('fetch', ((event) => {\r\n            const { request } = event;\r\n            const responsePromise = this.handleRequest({ request, event });\r\n            if (responsePromise) {\r\n                event.respondWith(responsePromise);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Adds a message event listener for URLs to cache from the window.\r\n     * This is useful to cache resources loaded on the page prior to when the\r\n     * service worker started controlling it.\r\n     *\r\n     * The format of the message data sent from the window should be as follows.\r\n     * Where the `urlsToCache` array may consist of URL strings or an array of\r\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\r\n     *\r\n     * ```\r\n     * {\r\n     *   type: 'CACHE_URLS',\r\n     *   payload: {\r\n     *     urlsToCache: [\r\n     *       './script1.js',\r\n     *       './script2.js',\r\n     *       ['./script3.js', {mode: 'no-cors'}],\r\n     *     ],\r\n     *   },\r\n     * }\r\n     * ```\r\n     */\r\n    addCacheListener() {\r\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n        self.addEventListener('message', ((event) => {\r\n            if (event.data && event.data.type === 'CACHE_URLS') {\r\n                const { payload } = event.data;\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\r\n                }\r\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\r\n                    if (typeof entry === 'string') {\r\n                        entry = [entry];\r\n                    }\r\n                    const request = new Request(...entry);\r\n                    return this.handleRequest({ request });\r\n                    // TODO(philipwalton): TypeScript errors without this typecast for\r\n                    // some reason (probably a bug). The real type here should work but\r\n                    // doesn't: `Array<Promise<Response> | undefined>`.\r\n                })); // TypeScript\r\n                event.waitUntil(requestPromises);\r\n                // If a MessageChannel was used, reply to the message on success.\r\n                if (event.ports && event.ports[0]) {\r\n                    requestPromises.then(() => event.ports[0].postMessage(true));\r\n                }\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Apply the routing rules to a FetchEvent object to get a Response from an\r\n     * appropriate Route's handler.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Request} options.request The request to handle (this is usually\r\n     *     from a fetch event, but it does not have to be).\r\n     * @param {FetchEvent} [options.event] The event that triggered the request,\r\n     *     if applicable.\r\n     * @return {Promise<Response>|undefined} A promise is returned if a\r\n     *     registered route can handle the request. If there is no matching\r\n     *     route and there's no `defaultHandler`, `undefined` is returned.\r\n     */\r\n    handleRequest({ request, event }) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'handleRequest',\r\n                paramName: 'options.request',\r\n            });\r\n        }\r\n        const url = new URL(request.url, location.href);\r\n        if (!url.protocol.startsWith('http')) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\r\n            }\r\n            return;\r\n        }\r\n        let { params, route } = this.findMatchingRoute({ url, request, event });\r\n        let handler = route && route.handler;\r\n        let debugMessages = [];\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (handler) {\r\n                debugMessages.push([\r\n                    `Found a route to handle this request:`, route,\r\n                ]);\r\n                if (params) {\r\n                    debugMessages.push([\r\n                        `Passing the following params to the route's handler:`, params,\r\n                    ]);\r\n                }\r\n            }\r\n        }\r\n        // If we don't have a handler because there was no matching route, then\r\n        // fall back to defaultHandler if that's defined.\r\n        if (!handler && this._defaultHandler) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                debugMessages.push(`Failed to find a matching route. Falling ` +\r\n                    `back to the default handler.`);\r\n            }\r\n            handler = this._defaultHandler;\r\n        }\r\n        if (!handler) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                // No handler so Workbox will do nothing. If logs is set of debug\r\n                // i.e. verbose, we should print out this information.\r\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\r\n            }\r\n            return;\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            // We have a handler, meaning Workbox is going to handle the route.\r\n            // print the routing details to the console.\r\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\r\n            debugMessages.forEach((msg) => {\r\n                if (Array.isArray(msg)) {\r\n                    logger.log(...msg);\r\n                }\r\n                else {\r\n                    logger.log(msg);\r\n                }\r\n            });\r\n            logger.groupEnd();\r\n        }\r\n        // Wrap in try and catch in case the handle method throws a synchronous\r\n        // error. It should still callback to the catch handler.\r\n        let responsePromise;\r\n        try {\r\n            responsePromise = handler.handle({ url, request, event, params });\r\n        }\r\n        catch (err) {\r\n            responsePromise = Promise.reject(err);\r\n        }\r\n        if (responsePromise instanceof Promise && this._catchHandler) {\r\n            responsePromise = responsePromise.catch((err) => {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    // Still include URL here as it will be async from the console group\r\n                    // and may not make sense without the URL\r\n                    logger.groupCollapsed(`Error thrown when responding to: ` +\r\n                        ` ${getFriendlyURL(url)}. Falling back to Catch Handler.`);\r\n                    logger.error(`Error thrown by:`, route);\r\n                    logger.error(err);\r\n                    logger.groupEnd();\r\n                }\r\n                return this._catchHandler.handle({ url, request, event });\r\n            });\r\n        }\r\n        return responsePromise;\r\n    }\r\n    /**\r\n     * Checks a request and URL (and optionally an event) against the list of\r\n     * registered routes, and if there's a match, returns the corresponding\r\n     * route along with any params generated by the match.\r\n     *\r\n     * @param {Object} options\r\n     * @param {URL} options.url\r\n     * @param {Request} options.request The request to match.\r\n     * @param {Event} [options.event] The corresponding event (unless N/A).\r\n     * @return {Object} An object with `route` and `params` properties.\r\n     *     They are populated if a matching route was found or `undefined`\r\n     *     otherwise.\r\n     */\r\n    findMatchingRoute({ url, request, event }) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(url, URL, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'findMatchingRoute',\r\n                paramName: 'options.url',\r\n            });\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'findMatchingRoute',\r\n                paramName: 'options.request',\r\n            });\r\n        }\r\n        const routes = this._routes.get(request.method) || [];\r\n        for (const route of routes) {\r\n            let params;\r\n            let matchResult = route.match({ url, request, event });\r\n            if (matchResult) {\r\n                // See https://github.com/GoogleChrome/workbox/issues/2079\r\n                params = matchResult;\r\n                if (Array.isArray(matchResult) && matchResult.length === 0) {\r\n                    // Instead of passing an empty array in as params, use undefined.\r\n                    params = undefined;\r\n                }\r\n                else if ((matchResult.constructor === Object &&\r\n                    Object.keys(matchResult).length === 0)) {\r\n                    // Instead of passing an empty object in as params, use undefined.\r\n                    params = undefined;\r\n                }\r\n                else if (typeof matchResult === 'boolean') {\r\n                    // For the boolean value true (rather than just something truth-y),\r\n                    // don't set params.\r\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\r\n                    params = undefined;\r\n                }\r\n                // Return early if have a match.\r\n                return { route, params };\r\n            }\r\n        }\r\n        // If no match was found above, return and empty object.\r\n        return {};\r\n    }\r\n    /**\r\n     * Define a default `handler` that's called when no routes explicitly\r\n     * match the incoming request.\r\n     *\r\n     * Without a default handler, unmatched requests will go against the\r\n     * network as if there were no service worker present.\r\n     *\r\n     * @param {module:workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resulting in a Response.\r\n     */\r\n    setDefaultHandler(handler) {\r\n        this._defaultHandler = normalizeHandler(handler);\r\n    }\r\n    /**\r\n     * If a Route throws an error while handling a request, this `handler`\r\n     * will be called and given a chance to provide a response.\r\n     *\r\n     * @param {module:workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resulting in a Response.\r\n     */\r\n    setCatchHandler(handler) {\r\n        this._catchHandler = normalizeHandler(handler);\r\n    }\r\n    /**\r\n     * Registers a route with the router.\r\n     *\r\n     * @param {module:workbox-routing.Route} route The route to register.\r\n     */\r\n    registerRoute(route) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(route, 'object', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route',\r\n            });\r\n            assert.hasMethod(route, 'match', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route',\r\n            });\r\n            assert.isType(route.handler, 'object', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route',\r\n            });\r\n            assert.hasMethod(route.handler, 'handle', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route.handler',\r\n            });\r\n            assert.isType(route.method, 'string', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route.method',\r\n            });\r\n        }\r\n        if (!this._routes.has(route.method)) {\r\n            this._routes.set(route.method, []);\r\n        }\r\n        // Give precedence to all of the earlier routes by adding this additional\r\n        // route to the end of the array.\r\n        this._routes.get(route.method).push(route);\r\n    }\r\n    /**\r\n     * Unregisters a route with the router.\r\n     *\r\n     * @param {module:workbox-routing.Route} route The route to unregister.\r\n     */\r\n    unregisterRoute(route) {\r\n        if (!this._routes.has(route.method)) {\r\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\r\n                method: route.method,\r\n            });\r\n        }\r\n        const routeIndex = this._routes.get(route.method).indexOf(route);\r\n        if (routeIndex > -1) {\r\n            this._routes.get(route.method).splice(routeIndex, 1);\r\n        }\r\n        else {\r\n            throw new WorkboxError('unregister-route-route-not-registered');\r\n        }\r\n    }\r\n}\r\nexport { Router };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { Router } from '../Router.js';\r\nimport '../_version.js';\r\nlet defaultRouter;\r\n/**\r\n * Creates a new, singleton Router instance if one does not exist. If one\r\n * does already exist, that instance is returned.\r\n *\r\n * @private\r\n * @return {Router}\r\n */\r\nexport const getOrCreateDefaultRouter = () => {\r\n    if (!defaultRouter) {\r\n        defaultRouter = new Router();\r\n        // The helpers that use the default Router assume these listeners exist.\r\n        defaultRouter.addFetchListener();\r\n        defaultRouter.addCacheListener();\r\n    }\r\n    return defaultRouter;\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst _cacheNameDetails = {\r\n    googleAnalytics: 'googleAnalytics',\r\n    precache: 'precache-v2',\r\n    prefix: 'workbox',\r\n    runtime: 'runtime',\r\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\r\n};\r\nconst _createCacheName = (cacheName) => {\r\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\r\n        .filter((value) => value && value.length > 0)\r\n        .join('-');\r\n};\r\nconst eachCacheNameDetail = (fn) => {\r\n    for (const key of Object.keys(_cacheNameDetails)) {\r\n        fn(key);\r\n    }\r\n};\r\nexport const cacheNames = {\r\n    updateDetails: (details) => {\r\n        eachCacheNameDetail((key) => {\r\n            if (typeof details[key] === 'string') {\r\n                _cacheNameDetails[key] = details[key];\r\n            }\r\n        });\r\n    },\r\n    getGoogleAnalyticsName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\r\n    },\r\n    getPrecacheName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\r\n    },\r\n    getPrefix: () => {\r\n        return _cacheNameDetails.prefix;\r\n    },\r\n    getRuntimeName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\r\n    },\r\n    getSuffix: () => {\r\n        return _cacheNameDetails.suffix;\r\n    },\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A helper function that prevents a promise from being flagged as unused.\r\n *\r\n * @private\r\n **/\r\nexport function dontWaitFor(promise) {\r\n    // Effective no-op.\r\n    promise.then(() => { });\r\n}\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n// Callbacks to be executed whenever there's a quota error.\r\nconst quotaErrorCallbacks = new Set();\r\nexport { quotaErrorCallbacks };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A class that wraps common IndexedDB functionality in a promise-based API.\r\n * It exposes all the underlying power and functionality of IndexedDB, but\r\n * wraps the most commonly used features in a way that's much simpler to use.\r\n *\r\n * @private\r\n */\r\nexport class DBWrapper {\r\n    /**\r\n     * @param {string} name\r\n     * @param {number} version\r\n     * @param {Object=} [callback]\r\n     * @param {!Function} [callbacks.onupgradeneeded]\r\n     * @param {!Function} [callbacks.onversionchange] Defaults to\r\n     *     DBWrapper.prototype._onversionchange when not specified.\r\n     * @private\r\n     */\r\n    constructor(name, version, { onupgradeneeded, onversionchange, } = {}) {\r\n        this._db = null;\r\n        this._name = name;\r\n        this._version = version;\r\n        this._onupgradeneeded = onupgradeneeded;\r\n        this._onversionchange = onversionchange || (() => this.close());\r\n    }\r\n    /**\r\n     * Returns the IDBDatabase instance (not normally needed).\r\n     * @return {IDBDatabase|undefined}\r\n     *\r\n     * @private\r\n     */\r\n    get db() {\r\n        return this._db;\r\n    }\r\n    /**\r\n     * Opens a connected to an IDBDatabase, invokes any onupgradedneeded\r\n     * callback, and added an onversionchange callback to the database.\r\n     *\r\n     * @return {IDBDatabase}\r\n     * @private\r\n     */\r\n    async open() {\r\n        if (this._db)\r\n            return;\r\n        this._db = await new Promise((resolve, reject) => {\r\n            // This flag is flipped to true if the timeout callback runs prior\r\n            // to the request failing or succeeding. Note: we use a timeout instead\r\n            // of an onblocked handler since there are cases where onblocked will\r\n            // never never run. A timeout better handles all possible scenarios:\r\n            // https://github.com/w3c/IndexedDB/issues/223\r\n            let openRequestTimedOut = false;\r\n            setTimeout(() => {\r\n                openRequestTimedOut = true;\r\n                reject(new Error('The open request was blocked and timed out'));\r\n            }, this.OPEN_TIMEOUT);\r\n            const openRequest = indexedDB.open(this._name, this._version);\r\n            openRequest.onerror = () => reject(openRequest.error);\r\n            openRequest.onupgradeneeded = (evt) => {\r\n                if (openRequestTimedOut) {\r\n                    openRequest.transaction.abort();\r\n                    openRequest.result.close();\r\n                }\r\n                else if (typeof this._onupgradeneeded === 'function') {\r\n                    this._onupgradeneeded(evt);\r\n                }\r\n            };\r\n            openRequest.onsuccess = () => {\r\n                const db = openRequest.result;\r\n                if (openRequestTimedOut) {\r\n                    db.close();\r\n                }\r\n                else {\r\n                    db.onversionchange = this._onversionchange.bind(this);\r\n                    resolve(db);\r\n                }\r\n            };\r\n        });\r\n        return this;\r\n    }\r\n    /**\r\n     * Polyfills the native `getKey()` method. Note, this is overridden at\r\n     * runtime if the browser supports the native method.\r\n     *\r\n     * @param {string} storeName\r\n     * @param {*} query\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    async getKey(storeName, query) {\r\n        return (await this.getAllKeys(storeName, query, 1))[0];\r\n    }\r\n    /**\r\n     * Polyfills the native `getAll()` method. Note, this is overridden at\r\n     * runtime if the browser supports the native method.\r\n     *\r\n     * @param {string} storeName\r\n     * @param {*} query\r\n     * @param {number} count\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    async getAll(storeName, query, count) {\r\n        return await this.getAllMatching(storeName, { query, count });\r\n    }\r\n    /**\r\n     * Polyfills the native `getAllKeys()` method. Note, this is overridden at\r\n     * runtime if the browser supports the native method.\r\n     *\r\n     * @param {string} storeName\r\n     * @param {*} query\r\n     * @param {number} count\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    async getAllKeys(storeName, query, count) {\r\n        const entries = await this.getAllMatching(storeName, { query, count, includeKeys: true });\r\n        return entries.map((entry) => entry.key);\r\n    }\r\n    /**\r\n     * Supports flexible lookup in an object store by specifying an index,\r\n     * query, direction, and count. This method returns an array of objects\r\n     * with the signature .\r\n     *\r\n     * @param {string} storeName\r\n     * @param {Object} [opts]\r\n     * @param {string} [opts.index] The index to use (if specified).\r\n     * @param {*} [opts.query]\r\n     * @param {IDBCursorDirection} [opts.direction]\r\n     * @param {number} [opts.count] The max number of results to return.\r\n     * @param {boolean} [opts.includeKeys] When true, the structure of the\r\n     *     returned objects is changed from an array of values to an array of\r\n     *     objects in the form {key, primaryKey, value}.\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    async getAllMatching(storeName, { index, query = null, // IE/Edge errors if query === `undefined`.\r\n    direction = 'next', count, includeKeys = false, } = {}) {\r\n        return await this.transaction([storeName], 'readonly', (txn, done) => {\r\n            const store = txn.objectStore(storeName);\r\n            const target = index ? store.index(index) : store;\r\n            const results = [];\r\n            const request = target.openCursor(query, direction);\r\n            request.onsuccess = () => {\r\n                const cursor = request.result;\r\n                if (cursor) {\r\n                    results.push(includeKeys ? cursor : cursor.value);\r\n                    if (count && results.length >= count) {\r\n                        done(results);\r\n                    }\r\n                    else {\r\n                        cursor.continue();\r\n                    }\r\n                }\r\n                else {\r\n                    done(results);\r\n                }\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Accepts a list of stores, a transaction type, and a callback and\r\n     * performs a transaction. A promise is returned that resolves to whatever\r\n     * value the callback chooses. The callback holds all the transaction logic\r\n     * and is invoked with two arguments:\r\n     *   1. The IDBTransaction object\r\n     *   2. A `done` function, that's used to resolve the promise when\r\n     *      when the transaction is done, if passed a value, the promise is\r\n     *      resolved to that value.\r\n     *\r\n     * @param {Array<string>} storeNames An array of object store names\r\n     *     involved in the transaction.\r\n     * @param {string} type Can be `readonly` or `readwrite`.\r\n     * @param {!Function} callback\r\n     * @return {*} The result of the transaction ran by the callback.\r\n     * @private\r\n     */\r\n    async transaction(storeNames, type, callback) {\r\n        await this.open();\r\n        return await new Promise((resolve, reject) => {\r\n            const txn = this._db.transaction(storeNames, type);\r\n            txn.onabort = () => reject(txn.error);\r\n            txn.oncomplete = () => resolve();\r\n            callback(txn, (value) => resolve(value));\r\n        });\r\n    }\r\n    /**\r\n     * Delegates async to a native IDBObjectStore method.\r\n     *\r\n     * @param {string} method The method name.\r\n     * @param {string} storeName The object store name.\r\n     * @param {string} type Can be `readonly` or `readwrite`.\r\n     * @param {...*} args The list of args to pass to the native method.\r\n     * @return {*} The result of the transaction.\r\n     * @private\r\n     */\r\n    async _call(method, storeName, type, ...args) {\r\n        const callback = (txn, done) => {\r\n            const objStore = txn.objectStore(storeName);\r\n            // TODO(philipwalton): Fix this underlying TS2684 error.\r\n            // @ts-ignore\r\n            const request = objStore[method].apply(objStore, args);\r\n            request.onsuccess = () => done(request.result);\r\n        };\r\n        return await this.transaction([storeName], type, callback);\r\n    }\r\n    /**\r\n     * Closes the connection opened by `DBWrapper.open()`. Generally this method\r\n     * doesn't need to be called since:\r\n     *   1. It's usually better to keep a connection open since opening\r\n     *      a new connection is somewhat slow.\r\n     *   2. Connections are automatically closed when the reference is\r\n     *      garbage collected.\r\n     * The primary use case for needing to close a connection is when another\r\n     * reference (typically in another tab) needs to upgrade it and would be\r\n     * blocked by the current, open connection.\r\n     *\r\n     * @private\r\n     */\r\n    close() {\r\n        if (this._db) {\r\n            this._db.close();\r\n            this._db = null;\r\n        }\r\n    }\r\n}\r\n// Exposed on the prototype to let users modify the default timeout on a\r\n// per-instance or global basis.\r\nDBWrapper.prototype.OPEN_TIMEOUT = 2000;\r\n// Wrap native IDBObjectStore methods according to their mode.\r\nconst methodsToWrap = {\r\n    readonly: ['get', 'count', 'getKey', 'getAll', 'getAllKeys'],\r\n    readwrite: ['add', 'put', 'clear', 'delete'],\r\n};\r\nfor (const [mode, methods] of Object.entries(methodsToWrap)) {\r\n    for (const method of methods) {\r\n        if (method in IDBObjectStore.prototype) {\r\n            // Don't use arrow functions here since we're outside of the class.\r\n            DBWrapper.prototype[method] =\r\n                async function (storeName, ...args) {\r\n                    return await this._call(method, storeName, mode, ...args);\r\n                };\r\n        }\r\n    }\r\n}\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:expiration:5.0.0'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\r\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\r\nimport '../_version.js';\r\nconst DB_NAME = 'workbox-expiration';\r\nconst OBJECT_STORE_NAME = 'cache-entries';\r\nconst normalizeURL = (unNormalizedUrl) => {\r\n    const url = new URL(unNormalizedUrl, location.href);\r\n    url.hash = '';\r\n    return url.href;\r\n};\r\n/**\r\n * Returns the timestamp model.\r\n *\r\n * @private\r\n */\r\nclass CacheTimestampsModel {\r\n    /**\r\n     *\r\n     * @param {string} cacheName\r\n     *\r\n     * @private\r\n     */\r\n    constructor(cacheName) {\r\n        this._cacheName = cacheName;\r\n        this._db = new DBWrapper(DB_NAME, 1, {\r\n            onupgradeneeded: (event) => this._handleUpgrade(event),\r\n        });\r\n    }\r\n    /**\r\n     * Should perform an upgrade of indexedDB.\r\n     *\r\n     * @param {Event} event\r\n     *\r\n     * @private\r\n     */\r\n    _handleUpgrade(event) {\r\n        const db = event.target.result;\r\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\r\n        // have to use the `id` keyPath here and create our own values (a\r\n        // concatenation of `url + cacheName`) instead of simply using\r\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\r\n        const objStore = db.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\r\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\r\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\r\n        // instead of doing both these indexes.\r\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\r\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\r\n        // Previous versions of `workbox-expiration` used `this._cacheName`\r\n        // as the IDBDatabase name.\r\n        deleteDatabase(this._cacheName);\r\n    }\r\n    /**\r\n     * @param {string} url\r\n     * @param {number} timestamp\r\n     *\r\n     * @private\r\n     */\r\n    async setTimestamp(url, timestamp) {\r\n        url = normalizeURL(url);\r\n        const entry = {\r\n            url,\r\n            timestamp,\r\n            cacheName: this._cacheName,\r\n            // Creating an ID from the URL and cache name won't be necessary once\r\n            // Edge switches to Chromium and all browsers we support work with\r\n            // array keyPaths.\r\n            id: this._getId(url),\r\n        };\r\n        await this._db.put(OBJECT_STORE_NAME, entry);\r\n    }\r\n    /**\r\n     * Returns the timestamp stored for a given URL.\r\n     *\r\n     * @param {string} url\r\n     * @return {number}\r\n     *\r\n     * @private\r\n     */\r\n    async getTimestamp(url) {\r\n        const entry = await this._db.get(OBJECT_STORE_NAME, this._getId(url));\r\n        return entry.timestamp;\r\n    }\r\n    /**\r\n     * Iterates through all the entries in the object store (from newest to\r\n     * oldest) and removes entries once either `maxCount` is reached or the\r\n     * entry's timestamp is less than `minTimestamp`.\r\n     *\r\n     * @param {number} minTimestamp\r\n     * @param {number} maxCount\r\n     * @return {Array<string>}\r\n     *\r\n     * @private\r\n     */\r\n    async expireEntries(minTimestamp, maxCount) {\r\n        const entriesToDelete = await this._db.transaction(OBJECT_STORE_NAME, 'readwrite', (txn, done) => {\r\n            const store = txn.objectStore(OBJECT_STORE_NAME);\r\n            const request = store.index('timestamp').openCursor(null, 'prev');\r\n            const entriesToDelete = [];\r\n            let entriesNotDeletedCount = 0;\r\n            request.onsuccess = () => {\r\n                const cursor = request.result;\r\n                if (cursor) {\r\n                    const result = cursor.value;\r\n                    // TODO(philipwalton): once we can use a multi-key index, we\r\n                    // won't have to check `cacheName` here.\r\n                    if (result.cacheName === this._cacheName) {\r\n                        // Delete an entry if it's older than the max age or\r\n                        // if we already have the max number allowed.\r\n                        if ((minTimestamp && result.timestamp < minTimestamp) ||\r\n                            (maxCount && entriesNotDeletedCount >= maxCount)) {\r\n                            // TODO(philipwalton): we should be able to delete the\r\n                            // entry right here, but doing so causes an iteration\r\n                            // bug in Safari stable (fixed in TP). Instead we can\r\n                            // store the keys of the entries to delete, and then\r\n                            // delete the separate transactions.\r\n                            // https://github.com/GoogleChrome/workbox/issues/1978\r\n                            // cursor.delete();\r\n                            // We only need to return the URL, not the whole entry.\r\n                            entriesToDelete.push(cursor.value);\r\n                        }\r\n                        else {\r\n                            entriesNotDeletedCount++;\r\n                        }\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    done(entriesToDelete);\r\n                }\r\n            };\r\n        });\r\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\r\n        // we should be able to remove this loop and do the entry deletion in the\r\n        // cursor loop above:\r\n        // https://github.com/GoogleChrome/workbox/issues/1978\r\n        const urlsDeleted = [];\r\n        for (const entry of entriesToDelete) {\r\n            await this._db.delete(OBJECT_STORE_NAME, entry.id);\r\n            urlsDeleted.push(entry.url);\r\n        }\r\n        return urlsDeleted;\r\n    }\r\n    /**\r\n     * Takes a URL and returns an ID that will be unique in the object store.\r\n     *\r\n     * @param {string} url\r\n     * @return {string}\r\n     *\r\n     * @private\r\n     */\r\n    _getId(url) {\r\n        // Creating an ID from the URL and cache name won't be necessary once\r\n        // Edge switches to Chromium and all browsers we support work with\r\n        // array keyPaths.\r\n        return this._cacheName + '|' + normalizeURL(url);\r\n    }\r\n}\r\nexport { CacheTimestampsModel };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * Deletes the database.\r\n * Note: this is exported separately from the DBWrapper module because most\r\n * usages of IndexedDB in workbox dont need deleting, and this way it can be\r\n * reused in tests to delete databases without creating DBWrapper instances.\r\n *\r\n * @param {string} name The database name.\r\n * @private\r\n */\r\nexport const deleteDatabase = async (name) => {\r\n    await new Promise((resolve, reject) => {\r\n        const request = indexedDB.deleteDatabase(name);\r\n        request.onerror = () => {\r\n            reject(request.error);\r\n        };\r\n        request.onblocked = () => {\r\n            reject(new Error('Delete blocked'));\r\n        };\r\n        request.onsuccess = () => {\r\n            resolve();\r\n        };\r\n    });\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\r\nimport './_version.js';\r\n/**\r\n * The `CacheExpiration` class allows you define an expiration and / or\r\n * limit on the number of responses stored in a\r\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\r\n *\r\n * @memberof module:workbox-expiration\r\n */\r\nclass CacheExpiration {\r\n    /**\r\n     * To construct a new CacheExpiration instance you must provide at least\r\n     * one of the `config` properties.\r\n     *\r\n     * @param {string} cacheName Name of the cache to apply restrictions to.\r\n     * @param {Object} config\r\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\r\n     * Entries used the least will be removed as the maximum is reached.\r\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\r\n     * it's treated as stale and removed.\r\n     */\r\n    constructor(cacheName, config = {}) {\r\n        this._isRunning = false;\r\n        this._rerunRequested = false;\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(cacheName, 'string', {\r\n                moduleName: 'workbox-expiration',\r\n                className: 'CacheExpiration',\r\n                funcName: 'constructor',\r\n                paramName: 'cacheName',\r\n            });\r\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\r\n                throw new WorkboxError('max-entries-or-age-required', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'CacheExpiration',\r\n                    funcName: 'constructor',\r\n                });\r\n            }\r\n            if (config.maxEntries) {\r\n                assert.isType(config.maxEntries, 'number', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'CacheExpiration',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.maxEntries',\r\n                });\r\n                // TODO: Assert is positive\r\n            }\r\n            if (config.maxAgeSeconds) {\r\n                assert.isType(config.maxAgeSeconds, 'number', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'CacheExpiration',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.maxAgeSeconds',\r\n                });\r\n                // TODO: Assert is positive\r\n            }\r\n        }\r\n        this._maxEntries = config.maxEntries;\r\n        this._maxAgeSeconds = config.maxAgeSeconds;\r\n        this._cacheName = cacheName;\r\n        this._timestampModel = new CacheTimestampsModel(cacheName);\r\n    }\r\n    /**\r\n     * Expires entries for the given cache and given criteria.\r\n     */\r\n    async expireEntries() {\r\n        if (this._isRunning) {\r\n            this._rerunRequested = true;\r\n            return;\r\n        }\r\n        this._isRunning = true;\r\n        const minTimestamp = this._maxAgeSeconds ?\r\n            Date.now() - (this._maxAgeSeconds * 1000) : 0;\r\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\r\n        // Delete URLs from the cache\r\n        const cache = await self.caches.open(this._cacheName);\r\n        for (const url of urlsExpired) {\r\n            await cache.delete(url);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (urlsExpired.length > 0) {\r\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\r\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\r\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\r\n                    `'${this._cacheName}' cache.`);\r\n                logger.log(`Expired the following ${urlsExpired.length === 1 ?\r\n                    'URL' : 'URLs'}:`);\r\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\r\n                logger.groupEnd();\r\n            }\r\n            else {\r\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\r\n            }\r\n        }\r\n        this._isRunning = false;\r\n        if (this._rerunRequested) {\r\n            this._rerunRequested = false;\r\n            dontWaitFor(this.expireEntries());\r\n        }\r\n    }\r\n    /**\r\n     * Update the timestamp for the given URL. This ensures the when\r\n     * removing entries based on maximum entries, most recently used\r\n     * is accurate or when expiring, the timestamp is up-to-date.\r\n     *\r\n     * @param {string} url\r\n     */\r\n    async updateTimestamp(url) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(url, 'string', {\r\n                moduleName: 'workbox-expiration',\r\n                className: 'CacheExpiration',\r\n                funcName: 'updateTimestamp',\r\n                paramName: 'url',\r\n            });\r\n        }\r\n        await this._timestampModel.setTimestamp(url, Date.now());\r\n    }\r\n    /**\r\n     * Can be used to check if a URL has expired or not before it's used.\r\n     *\r\n     * This requires a look up from IndexedDB, so can be slow.\r\n     *\r\n     * Note: This method will not remove the cached entry, call\r\n     * `expireEntries()` to remove indexedDB and Cache entries.\r\n     *\r\n     * @param {string} url\r\n     * @return {boolean}\r\n     */\r\n    async isURLExpired(url) {\r\n        if (!this._maxAgeSeconds) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                throw new WorkboxError(`expired-test-without-max-age`, {\r\n                    methodName: 'isURLExpired',\r\n                    paramName: 'maxAgeSeconds',\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            const timestamp = await this._timestampModel.getTimestamp(url);\r\n            const expireOlderThan = Date.now() - (this._maxAgeSeconds * 1000);\r\n            return (timestamp < expireOlderThan);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the IndexedDB object store used to keep track of cache expiration\r\n     * metadata.\r\n     */\r\n    async delete() {\r\n        // Make sure we don't attempt another rerun if we're called in the middle of\r\n        // a cache expiration.\r\n        this._rerunRequested = false;\r\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\r\n    }\r\n}\r\nexport { CacheExpiration };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nexport const pluginUtils = {\r\n    filter: (plugins, callbackName) => {\r\n        return plugins.filter((plugin) => callbackName in plugin);\r\n    },\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from './assert.js';\r\nimport { executeQuotaErrorCallbacks } from './executeQuotaErrorCallbacks.js';\r\nimport { getFriendlyURL } from './getFriendlyURL.js';\r\nimport { logger } from './logger.js';\r\nimport { pluginUtils } from '../utils/pluginUtils.js';\r\nimport { WorkboxError } from './WorkboxError.js';\r\nimport '../_version.js';\r\n/**\r\n * Wrapper around cache.put().\r\n *\r\n * Will call `cacheDidUpdate` on plugins if the cache was updated, using\r\n * `matchOptions` when determining what the old entry is.\r\n *\r\n * @param {Object} options\r\n * @param {string} options.cacheName\r\n * @param {Request} options.request\r\n * @param {Response} options.response\r\n * @param {Event} [options.event]\r\n * @param {Array<Object>} [options.plugins=[]]\r\n * @param {Object} [options.matchOptions]\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst putWrapper = async ({ cacheName, request, response, event, plugins = [], matchOptions, }) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (request.method && request.method !== 'GET') {\r\n            throw new WorkboxError('attempt-to-cache-non-get-request', {\r\n                url: getFriendlyURL(request.url),\r\n                method: request.method,\r\n            });\r\n        }\r\n    }\r\n    const effectiveRequest = await _getEffectiveRequest({\r\n        plugins, request, mode: 'write'\r\n    });\r\n    if (!response) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.error(`Cannot cache non-existent response for ` +\r\n                `'${getFriendlyURL(effectiveRequest.url)}'.`);\r\n        }\r\n        throw new WorkboxError('cache-put-with-no-response', {\r\n            url: getFriendlyURL(effectiveRequest.url),\r\n        });\r\n    }\r\n    let responseToCache = await _isResponseSafeToCache({\r\n        event,\r\n        plugins,\r\n        response,\r\n        request: effectiveRequest,\r\n    });\r\n    if (!responseToCache) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' will ` +\r\n                `not be cached.`, responseToCache);\r\n        }\r\n        return;\r\n    }\r\n    const cache = await self.caches.open(cacheName);\r\n    const updatePlugins = pluginUtils.filter(plugins, \"cacheDidUpdate\" /* CACHE_DID_UPDATE */);\r\n    let oldResponse = updatePlugins.length > 0 ?\r\n        await matchWrapper({ cacheName, matchOptions, request: effectiveRequest }) :\r\n        null;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.debug(`Updating the '${cacheName}' cache with a new Response for ` +\r\n            `${getFriendlyURL(effectiveRequest.url)}.`);\r\n    }\r\n    try {\r\n        await cache.put(effectiveRequest, responseToCache);\r\n    }\r\n    catch (error) {\r\n        // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\r\n        if (error.name === 'QuotaExceededError') {\r\n            await executeQuotaErrorCallbacks();\r\n        }\r\n        throw error;\r\n    }\r\n    for (let plugin of updatePlugins) {\r\n        await plugin[\"cacheDidUpdate\" /* CACHE_DID_UPDATE */].call(plugin, {\r\n            cacheName,\r\n            event,\r\n            oldResponse,\r\n            newResponse: responseToCache,\r\n            request: effectiveRequest,\r\n        });\r\n    }\r\n};\r\n/**\r\n * This is a wrapper around cache.match().\r\n *\r\n * @param {Object} options\r\n * @param {string} options.cacheName Name of the cache to match against.\r\n * @param {Request} options.request The Request that will be used to look up\r\n *     cache entries.\r\n * @param {Event} [options.event] The event that prompted the action.\r\n * @param {Object} [options.matchOptions] Options passed to cache.match().\r\n * @param {Array<Object>} [options.plugins=[]] Array of plugins.\r\n * @return {Response} A cached response if available.\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst matchWrapper = async ({ cacheName, request, event, matchOptions, plugins = [], }) => {\r\n    const cache = await self.caches.open(cacheName);\r\n    const effectiveRequest = await _getEffectiveRequest({\r\n        plugins, request, mode: 'read'\r\n    });\r\n    let cachedResponse = await cache.match(effectiveRequest, matchOptions);\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (cachedResponse) {\r\n            logger.debug(`Found a cached response in '${cacheName}'.`);\r\n        }\r\n        else {\r\n            logger.debug(`No cached response found in '${cacheName}'.`);\r\n        }\r\n    }\r\n    for (const plugin of plugins) {\r\n        if (\"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */ in plugin) {\r\n            const pluginMethod = plugin[\"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */];\r\n            cachedResponse = await pluginMethod.call(plugin, {\r\n                cacheName,\r\n                event,\r\n                matchOptions,\r\n                cachedResponse,\r\n                request: effectiveRequest,\r\n            });\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (cachedResponse) {\r\n                    assert.isInstance(cachedResponse, Response, {\r\n                        moduleName: 'Plugin',\r\n                        funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\r\n                        isReturnValueProblem: true,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return cachedResponse;\r\n};\r\n/**\r\n * This method will call cacheWillUpdate on the available plugins (or use\r\n * status === 200) to determine if the Response is safe and valid to cache.\r\n *\r\n * @param {Object} options\r\n * @param {Request} options.request\r\n * @param {Response} options.response\r\n * @param {Event} [options.event]\r\n * @param {Array<Object>} [options.plugins=[]]\r\n * @return {Promise<Response>}\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst _isResponseSafeToCache = async ({ request, response, event, plugins = [], }) => {\r\n    let responseToCache = response;\r\n    let pluginsUsed = false;\r\n    for (let plugin of plugins) {\r\n        if (\"cacheWillUpdate\" /* CACHE_WILL_UPDATE */ in plugin) {\r\n            pluginsUsed = true;\r\n            const pluginMethod = plugin[\"cacheWillUpdate\" /* CACHE_WILL_UPDATE */];\r\n            responseToCache = await pluginMethod.call(plugin, {\r\n                request,\r\n                response: responseToCache,\r\n                event,\r\n            });\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (responseToCache) {\r\n                    assert.isInstance(responseToCache, Response, {\r\n                        moduleName: 'Plugin',\r\n                        funcName: \"cacheWillUpdate\" /* CACHE_WILL_UPDATE */,\r\n                        isReturnValueProblem: true,\r\n                    });\r\n                }\r\n            }\r\n            if (!responseToCache) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (!pluginsUsed) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (responseToCache) {\r\n                if (responseToCache.status !== 200) {\r\n                    if (responseToCache.status === 0) {\r\n                        logger.warn(`The response for '${request.url}' is an opaque ` +\r\n                            `response. The caching strategy that you're using will not ` +\r\n                            `cache opaque responses by default.`);\r\n                    }\r\n                    else {\r\n                        logger.debug(`The response for '${request.url}' returned ` +\r\n                            `a status code of '${response.status}' and won't be cached as a ` +\r\n                            `result.`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        responseToCache = responseToCache && responseToCache.status === 200 ?\r\n            responseToCache : undefined;\r\n    }\r\n    return responseToCache ? responseToCache : null;\r\n};\r\n/**\r\n * Checks the list of plugins for the cacheKeyWillBeUsed callback, and\r\n * executes any of those callbacks found in sequence. The final `Request` object\r\n * returned by the last plugin is treated as the cache key for cache reads\r\n * and/or writes.\r\n *\r\n * @param {Object} options\r\n * @param {Request} options.request\r\n * @param {string} options.mode\r\n * @param {Array<Object>} [options.plugins=[]]\r\n * @return {Promise<Request>}\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst _getEffectiveRequest = async ({ request, mode, plugins = [], }) => {\r\n    const cacheKeyWillBeUsedPlugins = pluginUtils.filter(plugins, \"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */);\r\n    let effectiveRequest = request;\r\n    for (const plugin of cacheKeyWillBeUsedPlugins) {\r\n        effectiveRequest = await plugin[\"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */].call(plugin, { mode, request: effectiveRequest });\r\n        if (typeof effectiveRequest === 'string') {\r\n            effectiveRequest = new Request(effectiveRequest);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(effectiveRequest, Request, {\r\n                moduleName: 'Plugin',\r\n                funcName: \"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */,\r\n                isReturnValueProblem: true,\r\n            });\r\n        }\r\n    }\r\n    return effectiveRequest;\r\n};\r\nexport const cacheWrapper = {\r\n    put: putWrapper,\r\n    match: matchWrapper,\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from '../_private/logger.js';\r\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\r\nimport '../_version.js';\r\n/**\r\n * Runs all of the callback functions, one at a time sequentially, in the order\r\n * in which they were registered.\r\n *\r\n * @memberof module:workbox-core\r\n * @private\r\n */\r\nasync function executeQuotaErrorCallbacks() {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\r\n            `callbacks to clean up caches.`);\r\n    }\r\n    for (const callback of quotaErrorCallbacks) {\r\n        await callback();\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.log(callback, 'is complete.');\r\n        }\r\n    }\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log('Finished running callbacks.');\r\n    }\r\n}\r\nexport { executeQuotaErrorCallbacks };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { WorkboxError } from './WorkboxError.js';\r\nimport { logger } from './logger.js';\r\nimport { assert } from './assert.js';\r\nimport { getFriendlyURL } from '../_private/getFriendlyURL.js';\r\nimport { pluginUtils } from '../utils/pluginUtils.js';\r\nimport '../_version.js';\r\n/**\r\n * Wrapper around the fetch API.\r\n *\r\n * Will call requestWillFetch on available plugins.\r\n *\r\n * @param {Object} options\r\n * @param {Request|string} options.request\r\n * @param {Object} [options.fetchOptions]\r\n * @param {ExtendableEvent} [options.event]\r\n * @param {Array<Object>} [options.plugins=[]]\r\n * @return {Promise<Response>}\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst wrappedFetch = async ({ request, fetchOptions, event, plugins = [], }) => {\r\n    if (typeof request === 'string') {\r\n        request = new Request(request);\r\n    }\r\n    // We *should* be able to call `await event.preloadResponse` even if it's\r\n    // undefined, but for some reason, doing so leads to errors in our Node unit\r\n    // tests. To work around that, explicitly check preloadResponse's value first.\r\n    if (event instanceof FetchEvent && event.preloadResponse) {\r\n        const possiblePreloadResponse = await event.preloadResponse;\r\n        if (possiblePreloadResponse) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.log(`Using a preloaded navigation response for ` +\r\n                    `'${getFriendlyURL(request.url)}'`);\r\n            }\r\n            return possiblePreloadResponse;\r\n        }\r\n    }\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        assert.isInstance(request, Request, {\r\n            paramName: 'request',\r\n            expectedClass: Request,\r\n            moduleName: 'workbox-core',\r\n            className: 'fetchWrapper',\r\n            funcName: 'wrappedFetch',\r\n        });\r\n    }\r\n    const failedFetchPlugins = pluginUtils.filter(plugins, \"fetchDidFail\" /* FETCH_DID_FAIL */);\r\n    // If there is a fetchDidFail plugin, we need to save a clone of the\r\n    // original request before it's either modified by a requestWillFetch\r\n    // plugin or before the original request's body is consumed via fetch().\r\n    const originalRequest = failedFetchPlugins.length > 0 ?\r\n        request.clone() : null;\r\n    try {\r\n        for (let plugin of plugins) {\r\n            if (\"requestWillFetch\" /* REQUEST_WILL_FETCH */ in plugin) {\r\n                const pluginMethod = plugin[\"requestWillFetch\" /* REQUEST_WILL_FETCH */];\r\n                const requestClone = request.clone();\r\n                request = (await pluginMethod.call(plugin, {\r\n                    request: requestClone,\r\n                    event,\r\n                }));\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    if (request) {\r\n                        assert.isInstance(request, Request, {\r\n                            moduleName: 'Plugin',\r\n                            funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\r\n                            isReturnValueProblem: true,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (err) {\r\n        throw new WorkboxError('plugin-error-request-will-fetch', {\r\n            thrownError: err,\r\n        });\r\n    }\r\n    // The request can be altered by plugins with `requestWillFetch` making\r\n    // the original request (Most likely from a `fetch` event) to be different\r\n    // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\r\n    let pluginFilteredRequest = request.clone();\r\n    try {\r\n        let fetchResponse;\r\n        // See https://github.com/GoogleChrome/workbox/issues/1796\r\n        if (request.mode === 'navigate') {\r\n            fetchResponse = await fetch(request);\r\n        }\r\n        else {\r\n            fetchResponse = await fetch(request, fetchOptions);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.debug(`Network request for ` +\r\n                `'${getFriendlyURL(request.url)}' returned a response with ` +\r\n                `status '${fetchResponse.status}'.`);\r\n        }\r\n        for (const plugin of plugins) {\r\n            if (\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */ in plugin) {\r\n                fetchResponse = await plugin[\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */]\r\n                    .call(plugin, {\r\n                    event,\r\n                    request: pluginFilteredRequest,\r\n                    response: fetchResponse,\r\n                });\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    if (fetchResponse) {\r\n                        assert.isInstance(fetchResponse, Response, {\r\n                            moduleName: 'Plugin',\r\n                            funcName: \"fetchDidSucceed\" /* FETCH_DID_SUCCEED */,\r\n                            isReturnValueProblem: true,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return fetchResponse;\r\n    }\r\n    catch (error) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.error(`Network request for ` +\r\n                `'${getFriendlyURL(request.url)}' threw an error.`, error);\r\n        }\r\n        for (const plugin of failedFetchPlugins) {\r\n            await plugin[\"fetchDidFail\" /* FETCH_DID_FAIL */].call(plugin, {\r\n                error,\r\n                event,\r\n                originalRequest: originalRequest.clone(),\r\n                request: pluginFilteredRequest.clone(),\r\n            });\r\n        }\r\n        throw error;\r\n    }\r\n};\r\nconst fetchWrapper = {\r\n    fetch: wrappedFetch,\r\n};\r\nexport { fetchWrapper };\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:strategies:5.0.0'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nexport const cacheOkAndOpaquePlugin = {\r\n    /**\r\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\r\n     * 0 (opaque).\r\n     *\r\n     * @param {Object} options\r\n     * @param {Response} options.response\r\n     * @return {Response|null}\r\n     *\r\n     * @private\r\n     */\r\n    cacheWillUpdate: async ({ response }) => {\r\n        if (response.status === 200 || response.status === 0) {\r\n            return response;\r\n        }\r\n        return null;\r\n    },\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nlet supportStatus;\r\n/**\r\n * A utility function that determines whether the current browser supports\r\n * constructing a new `Response` from a `response.body` stream.\r\n *\r\n * @return {boolean} `true`, if the current browser can successfully\r\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\r\n *\r\n * @private\r\n */\r\nfunction canConstructResponseFromBodyStream() {\r\n    if (supportStatus === undefined) {\r\n        const testResponse = new Response('');\r\n        if ('body' in testResponse) {\r\n            try {\r\n                new Response(testResponse.body);\r\n                supportStatus = true;\r\n            }\r\n            catch (error) {\r\n                supportStatus = false;\r\n            }\r\n        }\r\n        supportStatus = false;\r\n    }\r\n    return supportStatus;\r\n}\r\nexport { canConstructResponseFromBodyStream };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\r\nimport './_version.js';\r\n/**\r\n * Allows developers to copy a response and modify its `headers`, `status`,\r\n * or `statusText` values (the values settable via a\r\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\r\n * object in the constructor).\r\n * To modify these values, pass a function as the second argument. That\r\n * function will be invoked with a single object with the response properties\r\n * `{headers, status, statusText}`. The return value of this function will\r\n * be used as the `ResponseInit` for the new `Response`. To change the values\r\n * either modify the passed parameter(s) and return it, or return a totally\r\n * new object.\r\n *\r\n * @param {Response} response\r\n * @param {Function} modifier\r\n * @memberof module:workbox-core\r\n */\r\nasync function copyResponse(response, modifier) {\r\n    const clonedResponse = response.clone();\r\n    // Create a fresh `ResponseInit` object by cloning the headers.\r\n    const responseInit = {\r\n        headers: new Headers(clonedResponse.headers),\r\n        status: clonedResponse.status,\r\n        statusText: clonedResponse.statusText,\r\n    };\r\n    // Apply any user modifications.\r\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\r\n    // Create the new response from the body stream and `ResponseInit`\r\n    // modifications. Note: not all browsers support the Response.body stream,\r\n    // so fall back to reading the entire body into memory as a blob.\r\n    const body = canConstructResponseFromBodyStream() ?\r\n        clonedResponse.body : await clonedResponse.blob();\r\n    return new Response(body, modifiedResponseInit);\r\n}\r\n;\r\nexport { copyResponse };\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:precaching:5.0.0'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport '../_version.js';\r\n// Name of the search parameter used to store revision info.\r\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\r\n/**\r\n * Converts a manifest entry into a versioned URL suitable for precaching.\r\n *\r\n * @param {Object|string} entry\r\n * @return {string} A URL with versioning info.\r\n *\r\n * @private\r\n * @memberof module:workbox-precaching\r\n */\r\nexport function createCacheKey(entry) {\r\n    if (!entry) {\r\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\r\n    }\r\n    // If a precache manifest entry is a string, it's assumed to be a versioned\r\n    // URL, like '/app.abcd1234.js'. Return as-is.\r\n    if (typeof entry === 'string') {\r\n        const urlObject = new URL(entry, location.href);\r\n        return {\r\n            cacheKey: urlObject.href,\r\n            url: urlObject.href,\r\n        };\r\n    }\r\n    const { revision, url } = entry;\r\n    if (!url) {\r\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\r\n    }\r\n    // If there's just a URL and no revision, then it's also assumed to be a\r\n    // versioned URL.\r\n    if (!revision) {\r\n        const urlObject = new URL(url, location.href);\r\n        return {\r\n            cacheKey: urlObject.href,\r\n            url: urlObject.href,\r\n        };\r\n    }\r\n    // Otherwise, construct a properly versioned URL using the custom Workbox\r\n    // search parameter along with the revision info.\r\n    const cacheKeyURL = new URL(url, location.href);\r\n    const originalURL = new URL(url, location.href);\r\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\r\n    return {\r\n        cacheKey: cacheKeyURL.href,\r\n        url: originalURL.href,\r\n    };\r\n}\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\r\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { copyResponse } from 'workbox-core/copyResponse.js';\r\nimport { createCacheKey } from './utils/createCacheKey.js';\r\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\r\nimport { printInstallDetails } from './utils/printInstallDetails.js';\r\nimport './_version.js';\r\n/**\r\n * Performs efficient precaching of assets.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nclass PrecacheController {\r\n    /**\r\n     * Create a new PrecacheController.\r\n     *\r\n     * @param {string} [cacheName] An optional name for the cache, to override\r\n     * the default precache name.\r\n     */\r\n    constructor(cacheName) {\r\n        this._cacheName = cacheNames.getPrecacheName(cacheName);\r\n        this._urlsToCacheKeys = new Map();\r\n        this._urlsToCacheModes = new Map();\r\n        this._cacheKeysToIntegrities = new Map();\r\n    }\r\n    /**\r\n     * This method will add items to the precache list, removing duplicates\r\n     * and ensuring the information is valid.\r\n     *\r\n     * @param {\r\n     * Array<module:workbox-precaching.PrecacheController.PrecacheEntry|string>\r\n     * } entries Array of entries to precache.\r\n     */\r\n    addToCacheList(entries) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isArray(entries, {\r\n                moduleName: 'workbox-precaching',\r\n                className: 'PrecacheController',\r\n                funcName: 'addToCacheList',\r\n                paramName: 'entries',\r\n            });\r\n        }\r\n        const urlsToWarnAbout = [];\r\n        for (const entry of entries) {\r\n            // See https://github.com/GoogleChrome/workbox/issues/2259\r\n            if (typeof entry === 'string') {\r\n                urlsToWarnAbout.push(entry);\r\n            }\r\n            else if (entry && entry.revision === undefined) {\r\n                urlsToWarnAbout.push(entry.url);\r\n            }\r\n            const { cacheKey, url } = createCacheKey(entry);\r\n            const cacheMode = (typeof entry !== 'string' && entry.revision) ?\r\n                'reload' : 'default';\r\n            if (this._urlsToCacheKeys.has(url) &&\r\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\r\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\r\n                    firstEntry: this._urlsToCacheKeys.get(url),\r\n                    secondEntry: cacheKey,\r\n                });\r\n            }\r\n            if (typeof entry !== 'string' && entry.integrity) {\r\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\r\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\r\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\r\n                        url,\r\n                    });\r\n                }\r\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\r\n            }\r\n            this._urlsToCacheKeys.set(url, cacheKey);\r\n            this._urlsToCacheModes.set(url, cacheMode);\r\n            if (urlsToWarnAbout.length > 0) {\r\n                const warningMessage = `Workbox is precaching URLs without revision ` +\r\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\r\n                    `Learn more at https://bit.ly/wb-precache`;\r\n                if (process.env.NODE_ENV === 'production') {\r\n                    // Use console directly to display this warning without bloating\r\n                    // bundle sizes by pulling in all of the logger codebase in prod.\r\n                    console.warn(warningMessage);\r\n                }\r\n                else {\r\n                    logger.warn(warningMessage);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Precaches new and updated assets. Call this method from the service worker\r\n     * install event.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Event} [options.event] The install event (if needed).\r\n     * @param {Array<Object>} [options.plugins] Plugins to be used for fetching\r\n     * and caching during install.\r\n     * @return {Promise<module:workbox-precaching.InstallResult>}\r\n     */\r\n    async install({ event, plugins } = {}) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (plugins) {\r\n                assert.isArray(plugins, {\r\n                    moduleName: 'workbox-precaching',\r\n                    className: 'PrecacheController',\r\n                    funcName: 'install',\r\n                    paramName: 'plugins',\r\n                });\r\n            }\r\n        }\r\n        const toBePrecached = [];\r\n        const alreadyPrecached = [];\r\n        const cache = await self.caches.open(this._cacheName);\r\n        const alreadyCachedRequests = await cache.keys();\r\n        const existingCacheKeys = new Set(alreadyCachedRequests.map((request) => request.url));\r\n        for (const [url, cacheKey] of this._urlsToCacheKeys) {\r\n            if (existingCacheKeys.has(cacheKey)) {\r\n                alreadyPrecached.push(url);\r\n            }\r\n            else {\r\n                toBePrecached.push({ cacheKey, url });\r\n            }\r\n        }\r\n        const precacheRequests = toBePrecached.map(({ cacheKey, url }) => {\r\n            const integrity = this._cacheKeysToIntegrities.get(cacheKey);\r\n            const cacheMode = this._urlsToCacheModes.get(url);\r\n            return this._addURLToCache({\r\n                cacheKey,\r\n                cacheMode,\r\n                event,\r\n                integrity,\r\n                plugins,\r\n                url,\r\n            });\r\n        });\r\n        await Promise.all(precacheRequests);\r\n        const updatedURLs = toBePrecached.map((item) => item.url);\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            printInstallDetails(updatedURLs, alreadyPrecached);\r\n        }\r\n        return {\r\n            updatedURLs,\r\n            notUpdatedURLs: alreadyPrecached,\r\n        };\r\n    }\r\n    /**\r\n     * Deletes assets that are no longer present in the current precache manifest.\r\n     * Call this method from the service worker activate event.\r\n     *\r\n     * @return {Promise<module:workbox-precaching.CleanupResult>}\r\n     */\r\n    async activate() {\r\n        const cache = await self.caches.open(this._cacheName);\r\n        const currentlyCachedRequests = await cache.keys();\r\n        const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\r\n        const deletedURLs = [];\r\n        for (const request of currentlyCachedRequests) {\r\n            if (!expectedCacheKeys.has(request.url)) {\r\n                await cache.delete(request);\r\n                deletedURLs.push(request.url);\r\n            }\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            printCleanupDetails(deletedURLs);\r\n        }\r\n        return { deletedURLs };\r\n    }\r\n    /**\r\n     * Requests the entry and saves it to the cache if the response is valid.\r\n     * By default, any response with a status code of less than 400 (including\r\n     * opaque responses) is considered valid.\r\n     *\r\n     * If you need to use custom criteria to determine what's valid and what\r\n     * isn't, then pass in an item in `options.plugins` that implements the\r\n     * `cacheWillUpdate()` lifecycle event.\r\n     *\r\n     * @private\r\n     * @param {Object} options\r\n     * @param {string} options.cacheKey The string to use a cache key.\r\n     * @param {string} options.url The URL to fetch and cache.\r\n     * @param {string} [options.cacheMode] The cache mode for the network request.\r\n     * @param {Event} [options.event] The install event (if passed).\r\n     * @param {Array<Object>} [options.plugins] An array of plugins to apply to\r\n     * fetch and caching.\r\n     * @param {string} [options.integrity] The value to use for the `integrity`\r\n     * field when making the request.\r\n     */\r\n    async _addURLToCache({ cacheKey, url, cacheMode, event, plugins, integrity }) {\r\n        const request = new Request(url, {\r\n            integrity,\r\n            cache: cacheMode,\r\n            credentials: 'same-origin',\r\n        });\r\n        let response = await fetchWrapper.fetch({\r\n            event,\r\n            plugins,\r\n            request,\r\n        });\r\n        // Allow developers to override the default logic about what is and isn't\r\n        // valid by passing in a plugin implementing cacheWillUpdate(), e.g.\r\n        // a `CacheableResponsePlugin` instance.\r\n        let cacheWillUpdatePlugin;\r\n        for (const plugin of (plugins || [])) {\r\n            if ('cacheWillUpdate' in plugin) {\r\n                cacheWillUpdatePlugin = plugin;\r\n            }\r\n        }\r\n        const isValidResponse = cacheWillUpdatePlugin ?\r\n            // Use a callback if provided. It returns a truthy value if valid.\r\n            // NOTE: invoke the method on the plugin instance so the `this` context\r\n            // is correct.\r\n            await cacheWillUpdatePlugin.cacheWillUpdate({ event, request, response }) :\r\n            // Otherwise, default to considering any response status under 400 valid.\r\n            // This includes, by default, considering opaque responses valid.\r\n            response.status < 400;\r\n        // Consider this a failure, leading to the `install` handler failing, if\r\n        // we get back an invalid response.\r\n        if (!isValidResponse) {\r\n            throw new WorkboxError('bad-precaching-response', {\r\n                url,\r\n                status: response.status,\r\n            });\r\n        }\r\n        // Redirected responses cannot be used to satisfy a navigation request, so\r\n        // any redirected response must be \"copied\" rather than cloned, so the new\r\n        // response doesn't contain the `redirected` flag. See:\r\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\r\n        if (response.redirected) {\r\n            response = await copyResponse(response);\r\n        }\r\n        await cacheWrapper.put({\r\n            event,\r\n            plugins,\r\n            response,\r\n            // `request` already uses `url`. We may be able to reuse it.\r\n            request: cacheKey === url ? request : new Request(cacheKey),\r\n            cacheName: this._cacheName,\r\n            matchOptions: {\r\n                ignoreSearch: true,\r\n            },\r\n        });\r\n    }\r\n    /**\r\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\r\n     * into account the revision information for the URL.\r\n     *\r\n     * @return {Map<string, string>} A URL to cache key mapping.\r\n     */\r\n    getURLsToCacheKeys() {\r\n        return this._urlsToCacheKeys;\r\n    }\r\n    /**\r\n     * Returns a list of all the URLs that have been precached by the current\r\n     * service worker.\r\n     *\r\n     * @return {Array<string>} The precached URLs.\r\n     */\r\n    getCachedURLs() {\r\n        return [...this._urlsToCacheKeys.keys()];\r\n    }\r\n    /**\r\n     * Returns the cache key used for storing a given URL. If that URL is\r\n     * unversioned, like `/index.html', then the cache key will be the original\r\n     * URL with a search parameter appended to it.\r\n     *\r\n     * @param {string} url A URL whose cache key you want to look up.\r\n     * @return {string} The versioned URL that corresponds to a cache key\r\n     * for the original URL, or undefined if that URL isn't precached.\r\n     */\r\n    getCacheKeyForURL(url) {\r\n        const urlObject = new URL(url, location.href);\r\n        return this._urlsToCacheKeys.get(urlObject.href);\r\n    }\r\n    /**\r\n     * This acts as a drop-in replacement for [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\r\n     * with the following differences:\r\n     *\r\n     * - It knows what the name of the precache is, and only checks in that cache.\r\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\r\n     * and it will automatically look up the correct cache key for the currently\r\n     * active revision of that URL.\r\n     *\r\n     * E.g., `matchPrecache('index.html')` will find the correct precached\r\n     * response for the currently active service worker, even if the actual cache\r\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\r\n     *\r\n     * @param {string|Request} request The key (without revisioning parameters)\r\n     * to look up in the precache.\r\n     * @return {Promise<Response|undefined>}\r\n     */\r\n    async matchPrecache(request) {\r\n        const url = request instanceof Request ? request.url : request;\r\n        const cacheKey = this.getCacheKeyForURL(url);\r\n        if (cacheKey) {\r\n            const cache = await self.caches.open(this._cacheName);\r\n            return cache.match(cacheKey);\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Returns a function that can be used within a\r\n     * {@link module:workbox-routing.Route} that will find a response for the\r\n     * incoming request against the precache.\r\n     *\r\n     * If for an unexpected reason there is a cache miss for the request,\r\n     * this will fall back to retrieving the `Response` via `fetch()` when\r\n     * `fallbackToNetwork` is `true`.\r\n     *\r\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\r\n     * response from the network if there's a precache miss.\r\n     * @return {module:workbox-routing~handlerCallback}\r\n     */\r\n    createHandler(fallbackToNetwork = true) {\r\n        return async ({ request }) => {\r\n            try {\r\n                const response = await this.matchPrecache(request);\r\n                if (response) {\r\n                    return response;\r\n                }\r\n                // This shouldn't normally happen, but there are edge cases:\r\n                // https://github.com/GoogleChrome/workbox/issues/1441\r\n                throw new WorkboxError('missing-precache-entry', {\r\n                    cacheName: this._cacheName,\r\n                    url: request instanceof Request ? request.url : request,\r\n                });\r\n            }\r\n            catch (error) {\r\n                if (fallbackToNetwork) {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        logger.debug(`Unable to respond with precached response. ` +\r\n                            `Falling back to network.`, error);\r\n                    }\r\n                    return fetch(request);\r\n                }\r\n                throw error;\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * Returns a function that looks up `url` in the precache (taking into\r\n     * account revision information), and returns the corresponding `Response`.\r\n     *\r\n     * If for an unexpected reason there is a cache miss when looking up `url`,\r\n     * this will fall back to retrieving the `Response` via `fetch()` when\r\n     * `fallbackToNetwork` is `true`.\r\n     *\r\n     * @param {string} url The precached URL which will be used to lookup the\r\n     * `Response`.\r\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\r\n     * response from the network if there's a precache miss.\r\n     * @return {module:workbox-routing~handlerCallback}\r\n     */\r\n    createHandlerBoundToURL(url, fallbackToNetwork = true) {\r\n        const cacheKey = this.getCacheKeyForURL(url);\r\n        if (!cacheKey) {\r\n            throw new WorkboxError('non-precached-url', { url });\r\n        }\r\n        const handler = this.createHandler(fallbackToNetwork);\r\n        const request = new Request(url);\r\n        return () => handler({ request });\r\n    }\r\n}\r\nexport { PrecacheController };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { PrecacheController } from '../PrecacheController.js';\r\nimport '../_version.js';\r\nlet precacheController;\r\n/**\r\n * @return {PrecacheController}\r\n * @private\r\n */\r\nexport const getOrCreatePrecacheController = () => {\r\n    if (!precacheController) {\r\n        precacheController = new PrecacheController();\r\n    }\r\n    return precacheController;\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './getOrCreatePrecacheController.js';\r\nimport { generateURLVariations } from './generateURLVariations.js';\r\nimport '../_version.js';\r\n/**\r\n * This function will take the request URL and manipulate it based on the\r\n * configuration options.\r\n *\r\n * @param {string} url\r\n * @param {Object} options\r\n * @return {string} Returns the URL in the cache that matches the request,\r\n * if possible.\r\n *\r\n * @private\r\n */\r\nexport const getCacheKeyForURL = (url, options) => {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\r\n    for (const possibleURL of generateURLVariations(url, options)) {\r\n        const possibleCacheKey = urlsToCacheKeys.get(possibleURL);\r\n        if (possibleCacheKey) {\r\n            return possibleCacheKey;\r\n        }\r\n    }\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\r\nimport '../_version.js';\r\n/**\r\n * Generator function that yields possible variations on the original URL to\r\n * check, one at a time.\r\n *\r\n * @param {string} url\r\n * @param {Object} options\r\n *\r\n * @private\r\n * @memberof module:workbox-precaching\r\n */\r\nexport function* generateURLVariations(url, { ignoreURLParametersMatching, directoryIndex, cleanURLs, urlManipulation, } = {}) {\r\n    const urlObject = new URL(url, location.href);\r\n    urlObject.hash = '';\r\n    yield urlObject.href;\r\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\r\n    yield urlWithoutIgnoredParams.href;\r\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\r\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\r\n        directoryURL.pathname += directoryIndex;\r\n        yield directoryURL.href;\r\n    }\r\n    if (cleanURLs) {\r\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\r\n        cleanURL.pathname += '.html';\r\n        yield cleanURL.href;\r\n    }\r\n    if (urlManipulation) {\r\n        const additionalURLs = urlManipulation({ url: urlObject });\r\n        for (const urlToAttempt of additionalURLs) {\r\n            yield urlToAttempt.href;\r\n        }\r\n    }\r\n}\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * Removes any URL search parameters that should be ignored.\r\n *\r\n * @param {URL} urlObject The original URL.\r\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\r\n * each search parameter name. Matches mean that the search parameter should be\r\n * ignored.\r\n * @return {URL} The URL with any ignored search parameters removed.\r\n *\r\n * @private\r\n * @memberof module:workbox-precaching\r\n */\r\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\r\n    // Convert the iterable into an array at the start of the loop to make sure\r\n    // deletion doesn't mess up iteration.\r\n    for (const paramName of [...urlObject.searchParams.keys()]) {\r\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\r\n            urlObject.searchParams.delete(paramName);\r\n        }\r\n    }\r\n    return urlObject;\r\n}\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { addFetchListener } from './utils/addFetchListener.js';\r\nimport './_version.js';\r\nlet listenerAdded = false;\r\n/**\r\n * Add a `fetch` listener to the service worker that will\r\n * respond to\r\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\r\n * with precached assets.\r\n *\r\n * Requests for assets that aren't precached, the `FetchEvent` will not be\r\n * responded to, allowing the event to fall through to other `fetch` event\r\n * listeners.\r\n *\r\n * @param {Object} [options]\r\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\r\n * check cache entries for a URLs ending with '/' to see if there is a hit when\r\n * appending the `directoryIndex` value.\r\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\r\n * array of regex's to remove search params when looking for a cache match.\r\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\r\n * check the cache for the URL with a `.html` added to the end of the end.\r\n * @param {module:workbox-precaching~urlManipulation} [options.urlManipulation]\r\n * This is a function that should take a URL and return an array of\r\n * alternative URLs that should be checked for precache matches.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nfunction addRoute(options) {\r\n    if (!listenerAdded) {\r\n        addFetchListener(options);\r\n        listenerAdded = true;\r\n    }\r\n}\r\n;\r\nexport { addRoute };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { getCacheKeyForURL } from './getCacheKeyForURL.js';\r\nimport '../_version.js';\r\n/**\r\n * Adds a `fetch` listener to the service worker that will\r\n * respond to\r\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\r\n * with precached assets.\r\n *\r\n * Requests for assets that aren't precached, the `FetchEvent` will not be\r\n * responded to, allowing the event to fall through to other `fetch` event\r\n * listeners.\r\n *\r\n * NOTE: when called more than once this method will replace the previously set\r\n * configuration options. Calling it more than once is not recommended outside\r\n * of tests.\r\n *\r\n * @private\r\n * @param {Object} [options]\r\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\r\n * check cache entries for a URLs ending with '/' to see if there is a hit when\r\n * appending the `directoryIndex` value.\r\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\r\n * array of regex's to remove search params when looking for a cache match.\r\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\r\n * check the cache for the URL with a `.html` added to the end of the end.\r\n * @param {workbox.precaching~urlManipulation} [options.urlManipulation]\r\n * This is a function that should take a URL and return an array of\r\n * alternative URLs that should be checked for precache matches.\r\n */\r\nexport const addFetchListener = ({ ignoreURLParametersMatching = [/^utm_/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) => {\r\n    const cacheName = cacheNames.getPrecacheName();\r\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n    self.addEventListener('fetch', ((event) => {\r\n        const precachedURL = getCacheKeyForURL(event.request.url, {\r\n            cleanURLs,\r\n            directoryIndex,\r\n            ignoreURLParametersMatching,\r\n            urlManipulation,\r\n        });\r\n        if (!precachedURL) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`Precaching did not find a match for ` +\r\n                    getFriendlyURL(event.request.url));\r\n            }\r\n            return;\r\n        }\r\n        let responsePromise = self.caches.open(cacheName).then((cache) => {\r\n            return cache.match(precachedURL);\r\n        }).then((cachedResponse) => {\r\n            if (cachedResponse) {\r\n                return cachedResponse;\r\n            }\r\n            // Fall back to the network if we don't have a cached response\r\n            // (perhaps due to manual cache cleanup).\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.warn(`The precached response for ` +\r\n                    `${getFriendlyURL(precachedURL)} in ${cacheName} was not found. ` +\r\n                    `Falling back to the network instead.`);\r\n            }\r\n            return fetch(precachedURL);\r\n        });\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            responsePromise = responsePromise.then((response) => {\r\n                // Workbox is going to handle the route.\r\n                // print the routing details to the console.\r\n                logger.groupCollapsed(`Precaching is responding to: ` +\r\n                    getFriendlyURL(event.request.url));\r\n                logger.log(`Serving the precached url: ${precachedURL}`);\r\n                logger.groupCollapsed(`View request details here.`);\r\n                logger.log(event.request);\r\n                logger.groupEnd();\r\n                logger.groupCollapsed(`View response details here.`);\r\n                logger.log(response);\r\n                logger.groupEnd();\r\n                logger.groupEnd();\r\n                return response;\r\n            });\r\n        }\r\n        event.respondWith(responsePromise);\r\n    }));\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst plugins = [];\r\nexport const precachePlugins = {\r\n    /*\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    get() {\r\n        return plugins;\r\n    },\r\n    /*\r\n     * @param {Array} newPlugins\r\n     * @private\r\n     */\r\n    add(newPlugins) {\r\n        plugins.push(...newPlugins);\r\n    },\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport { precachePlugins } from './utils/precachePlugins.js';\r\nimport './_version.js';\r\nconst installListener = (event) => {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    const plugins = precachePlugins.get();\r\n    event.waitUntil(precacheController.install({ event, plugins })\r\n        .catch((error) => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.error(`Service worker installation failed. It will ` +\r\n                `be retried automatically during the next navigation.`);\r\n        }\r\n        // Re-throw the error to ensure installation fails.\r\n        throw error;\r\n    }));\r\n};\r\nconst activateListener = (event) => {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    event.waitUntil(precacheController.activate());\r\n};\r\n/**\r\n * Adds items to the precache list, removing any duplicates and\r\n * stores the files in the\r\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\r\n * worker installs.\r\n *\r\n * This method can be called multiple times.\r\n *\r\n * Please note: This method **will not** serve any of the cached files for you.\r\n * It only precaches files. To respond to a network request you call\r\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\r\n *\r\n * If you have a single array of files to precache, you can just call\r\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\r\n *\r\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nfunction precache(entries) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    precacheController.addToCacheList(entries);\r\n    if (entries.length > 0) {\r\n        // NOTE: these listeners will only be added once (even if the `precache()`\r\n        // method is called multiple times) because event listeners are implemented\r\n        // as a set, where each listener must be unique.\r\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n        self.addEventListener('install', installListener);\r\n        self.addEventListener('activate', activateListener);\r\n    }\r\n}\r\n;\r\nexport { precache };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { CacheExpiration } from './CacheExpiration.js';\r\nimport './_version.js';\r\n/**\r\n * This plugin can be used in the Workbox APIs to regularly enforce a\r\n * limit on the age and / or the number of cached requests.\r\n *\r\n * Whenever a cached request is used or updated, this plugin will look\r\n * at the used Cache and remove any old or extra requests.\r\n *\r\n * When using `maxAgeSeconds`, requests may be used *once* after expiring\r\n * because the expiration clean up will not have occurred until *after* the\r\n * cached request has been used. If the request has a \"Date\" header, then\r\n * a light weight expiration check is performed and the request will not be\r\n * used immediately.\r\n *\r\n * When using `maxEntries`, the entry least-recently requested will be removed\r\n * from the cache first.\r\n *\r\n * @memberof module:workbox-expiration\r\n */\r\nclass ExpirationPlugin {\r\n    /**\r\n     * @param {Object} config\r\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\r\n     * Entries used the least will be removed as the maximum is reached.\r\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\r\n     * it's treated as stale and removed.\r\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\r\n     * automatic deletion if the available storage quota has been exceeded.\r\n     */\r\n    constructor(config = {}) {\r\n        /**\r\n         * A \"lifecycle\" callback that will be triggered automatically by the\r\n         * `workbox-strategies` handlers when a `Response` is about to be returned\r\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\r\n         * the handler. It allows the `Response` to be inspected for freshness and\r\n         * prevents it from being used if the `Response`'s `Date` header value is\r\n         * older than the configured `maxAgeSeconds`.\r\n         *\r\n         * @param {Object} options\r\n         * @param {string} options.cacheName Name of the cache the response is in.\r\n         * @param {Response} options.cachedResponse The `Response` object that's been\r\n         *     read from a cache and whose freshness should be checked.\r\n         * @return {Response} Either the `cachedResponse`, if it's\r\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\r\n         *\r\n         * @private\r\n         */\r\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse }) => {\r\n            if (!cachedResponse) {\r\n                return null;\r\n            }\r\n            let isFresh = this._isResponseDateFresh(cachedResponse);\r\n            // Expire entries to ensure that even if the expiration date has\r\n            // expired, it'll only be used once.\r\n            const cacheExpiration = this._getCacheExpiration(cacheName);\r\n            dontWaitFor(cacheExpiration.expireEntries());\r\n            // Update the metadata for the request URL to the current timestamp,\r\n            // but don't `await` it as we don't want to block the response.\r\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\r\n            if (event) {\r\n                try {\r\n                    event.waitUntil(updateTimestampDone);\r\n                }\r\n                catch (error) {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        // The event may not be a fetch event; only log the URL if it is.\r\n                        if ('request' in event) {\r\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\r\n                                `updating cache entry for ` +\r\n                                `'${getFriendlyURL(event.request.url)}'.`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return isFresh ? cachedResponse : null;\r\n        };\r\n        /**\r\n         * A \"lifecycle\" callback that will be triggered automatically by the\r\n         * `workbox-strategies` handlers when an entry is added to a cache.\r\n         *\r\n         * @param {Object} options\r\n         * @param {string} options.cacheName Name of the cache that was updated.\r\n         * @param {string} options.request The Request for the cached entry.\r\n         *\r\n         * @private\r\n         */\r\n        this.cacheDidUpdate = async ({ cacheName, request }) => {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                assert.isType(cacheName, 'string', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'cacheDidUpdate',\r\n                    paramName: 'cacheName',\r\n                });\r\n                assert.isInstance(request, Request, {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'cacheDidUpdate',\r\n                    paramName: 'request',\r\n                });\r\n            }\r\n            const cacheExpiration = this._getCacheExpiration(cacheName);\r\n            await cacheExpiration.updateTimestamp(request.url);\r\n            await cacheExpiration.expireEntries();\r\n        };\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\r\n                throw new WorkboxError('max-entries-or-age-required', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'constructor',\r\n                });\r\n            }\r\n            if (config.maxEntries) {\r\n                assert.isType(config.maxEntries, 'number', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.maxEntries',\r\n                });\r\n            }\r\n            if (config.maxAgeSeconds) {\r\n                assert.isType(config.maxAgeSeconds, 'number', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.maxAgeSeconds',\r\n                });\r\n            }\r\n        }\r\n        this._config = config;\r\n        this._maxAgeSeconds = config.maxAgeSeconds;\r\n        this._cacheExpirations = new Map();\r\n        if (config.purgeOnQuotaError) {\r\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\r\n        }\r\n    }\r\n    /**\r\n     * A simple helper method to return a CacheExpiration instance for a given\r\n     * cache name.\r\n     *\r\n     * @param {string} cacheName\r\n     * @return {CacheExpiration}\r\n     *\r\n     * @private\r\n     */\r\n    _getCacheExpiration(cacheName) {\r\n        if (cacheName === cacheNames.getRuntimeName()) {\r\n            throw new WorkboxError('expire-custom-caches-only');\r\n        }\r\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\r\n        if (!cacheExpiration) {\r\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\r\n            this._cacheExpirations.set(cacheName, cacheExpiration);\r\n        }\r\n        return cacheExpiration;\r\n    }\r\n    /**\r\n     * @param {Response} cachedResponse\r\n     * @return {boolean}\r\n     *\r\n     * @private\r\n     */\r\n    _isResponseDateFresh(cachedResponse) {\r\n        if (!this._maxAgeSeconds) {\r\n            // We aren't expiring by age, so return true, it's fresh\r\n            return true;\r\n        }\r\n        // Check if the 'date' header will suffice a quick expiration check.\r\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\r\n        // discussion.\r\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\r\n        if (dateHeaderTimestamp === null) {\r\n            // Unable to parse date, so assume it's fresh.\r\n            return true;\r\n        }\r\n        // If we have a valid headerTime, then our response is fresh iff the\r\n        // headerTime plus maxAgeSeconds is greater than the current time.\r\n        const now = Date.now();\r\n        return dateHeaderTimestamp >= now - (this._maxAgeSeconds * 1000);\r\n    }\r\n    /**\r\n     * This method will extract the data header and parse it into a useful\r\n     * value.\r\n     *\r\n     * @param {Response} cachedResponse\r\n     * @return {number|null}\r\n     *\r\n     * @private\r\n     */\r\n    _getDateHeaderTimestamp(cachedResponse) {\r\n        if (!cachedResponse.headers.has('date')) {\r\n            return null;\r\n        }\r\n        const dateHeader = cachedResponse.headers.get('date');\r\n        const parsedDate = new Date(dateHeader);\r\n        const headerTime = parsedDate.getTime();\r\n        // If the Date header was invalid for some reason, parsedDate.getTime()\r\n        // will return NaN.\r\n        if (isNaN(headerTime)) {\r\n            return null;\r\n        }\r\n        return headerTime;\r\n    }\r\n    /**\r\n     * This is a helper method that performs two operations:\r\n     *\r\n     * - Deletes *all* the underlying Cache instances associated with this plugin\r\n     * instance, by calling caches.delete() on your behalf.\r\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\r\n     * details for each Cache instance.\r\n     *\r\n     * When using cache expiration, calling this method is preferable to calling\r\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\r\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\r\n     *\r\n     * Note that if you're *not* using cache expiration for a given cache, calling\r\n     * `caches.delete()` and passing in the cache's name should be sufficient.\r\n     * There is no Workbox-specific method needed for cleanup in that case.\r\n     */\r\n    async deleteCacheAndMetadata() {\r\n        // Do this one at a time instead of all at once via `Promise.all()` to\r\n        // reduce the chance of inconsistency if a promise rejects.\r\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\r\n            await self.caches.delete(cacheName);\r\n            await cacheExpiration.delete();\r\n        }\r\n        // Reset this._cacheExpirations to its initial state.\r\n        this._cacheExpirations = new Map();\r\n    }\r\n}\r\nexport { ExpirationPlugin };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from './_private/logger.js';\r\nimport { assert } from './_private/assert.js';\r\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\r\nimport './_version.js';\r\n/**\r\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\r\n * there's a quota error.\r\n *\r\n * @param {Function} callback\r\n * @memberof module:workbox-core\r\n */\r\nfunction registerQuotaErrorCallback(callback) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        assert.isType(callback, 'function', {\r\n            moduleName: 'workbox-core',\r\n            funcName: 'register',\r\n            paramName: 'callback',\r\n        });\r\n    }\r\n    quotaErrorCallbacks.add(callback);\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log('Registered a callback to respond to quota errors.', callback);\r\n    }\r\n}\r\nexport { registerQuotaErrorCallback };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\r\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { messages } from './utils/messages.js';\r\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of a\r\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\r\n * request strategy.\r\n *\r\n * Resources are requested from both the cache and the network in parallel.\r\n * The strategy will respond with the cached version if available, otherwise\r\n * wait for the network response. The cache is updated with the network response\r\n * with each successful request.\r\n *\r\n * By default, this strategy will cache responses with a 200 status code as\r\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\r\n * Opaque responses are cross-origin requests where the response doesn't\r\n * support [CORS]{@link https://enable-cors.org/}.\r\n *\r\n * If the network request fails, and there is no cache match, this will throw\r\n * a `WorkboxError` exception.\r\n *\r\n * @memberof module:workbox-strategies\r\n */\r\nclass StaleWhileRevalidate {\r\n    /**\r\n     * @param {Object} options\r\n     * @param {string} options.cacheName Cache name to store and retrieve\r\n     * requests. Defaults to cache names provided by\r\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\r\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\r\n     * to use in conjunction with this caching strategy.\r\n     * @param {Object} options.fetchOptions Values passed along to the\r\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\r\n     * of all fetch() requests made by this strategy.\r\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\r\n     */\r\n    constructor(options = {}) {\r\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\r\n        this._plugins = options.plugins || [];\r\n        if (options.plugins) {\r\n            let isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\r\n            this._plugins = isUsingCacheWillUpdate ?\r\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\r\n        }\r\n        else {\r\n            // No plugins passed in, use the default plugin.\r\n            this._plugins = [cacheOkAndOpaquePlugin];\r\n        }\r\n        this._fetchOptions = options.fetchOptions;\r\n        this._matchOptions = options.matchOptions;\r\n    }\r\n    /**\r\n     * This method will perform a request strategy and follows an API that\r\n     * will work with the\r\n     * [Workbox Router]{@link module:workbox-routing.Router}.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Request|string} options.request A request to run this strategy for.\r\n     * @param {Event} [options.event] The event that triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async handle({ event, request }) {\r\n        const logs = [];\r\n        if (typeof request === 'string') {\r\n            request = new Request(request);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-strategies',\r\n                className: 'StaleWhileRevalidate',\r\n                funcName: 'handle',\r\n                paramName: 'request',\r\n            });\r\n        }\r\n        const fetchAndCachePromise = this._getFromNetwork({ request, event });\r\n        let response = await cacheWrapper.match({\r\n            cacheName: this._cacheName,\r\n            request,\r\n            event,\r\n            matchOptions: this._matchOptions,\r\n            plugins: this._plugins,\r\n        });\r\n        let error;\r\n        if (response) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`Found a cached response in the '${this._cacheName}'` +\r\n                    ` cache. Will update with the network response in the background.`);\r\n            }\r\n            if (event) {\r\n                try {\r\n                    event.waitUntil(fetchAndCachePromise);\r\n                }\r\n                catch (error) {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\r\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\r\n                    `Will wait for the network response.`);\r\n            }\r\n            try {\r\n                response = await fetchAndCachePromise;\r\n            }\r\n            catch (err) {\r\n                error = err;\r\n            }\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.groupCollapsed(messages.strategyStart('StaleWhileRevalidate', request));\r\n            for (let log of logs) {\r\n                logger.log(log);\r\n            }\r\n            messages.printFinalResponse(response);\r\n            logger.groupEnd();\r\n        }\r\n        if (!response) {\r\n            throw new WorkboxError('no-response', { url: request.url, error });\r\n        }\r\n        return response;\r\n    }\r\n    /**\r\n     * @param {Object} options\r\n     * @param {Request} options.request\r\n     * @param {Event} [options.event]\r\n     * @return {Promise<Response>}\r\n     *\r\n     * @private\r\n     */\r\n    async _getFromNetwork({ request, event }) {\r\n        const response = await fetchWrapper.fetch({\r\n            request,\r\n            event,\r\n            fetchOptions: this._fetchOptions,\r\n            plugins: this._plugins,\r\n        });\r\n        const cachePutPromise = cacheWrapper.put({\r\n            cacheName: this._cacheName,\r\n            request,\r\n            response: response.clone(),\r\n            event,\r\n            plugins: this._plugins,\r\n        });\r\n        if (event) {\r\n            try {\r\n                event.waitUntil(cachePutPromise);\r\n            }\r\n            catch (error) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\r\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\r\n                }\r\n            }\r\n        }\r\n        return response;\r\n    }\r\n}\r\nexport { StaleWhileRevalidate };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { addRoute } from './addRoute.js';\r\nimport { precache } from './precache.js';\r\nimport './_version.js';\r\n/**\r\n * This method will add entries to the precache list and add a route to\r\n * respond to fetch events.\r\n *\r\n * This is a convenience method that will call\r\n * [precache()]{@link module:workbox-precaching.precache} and\r\n * [addRoute()]{@link module:workbox-precaching.addRoute} in a single call.\r\n *\r\n * @param {Array<Object|string>} entries Array of entries to precache.\r\n * @param {Object} [options] See\r\n * [addRoute() options]{@link module:workbox-precaching.addRoute}.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nfunction precacheAndRoute(entries, options) {\r\n    precache(entries);\r\n    addRoute(options);\r\n}\r\n;\r\nexport { precacheAndRoute };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { Route } from './Route.js';\r\nimport { RegExpRoute } from './RegExpRoute.js';\r\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\r\nimport './_version.js';\r\n/**\r\n * Easily register a RegExp, string, or function with a caching\r\n * strategy to a singleton Router instance.\r\n *\r\n * This method will generate a Route for you if needed and\r\n * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.\r\n *\r\n * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture\r\n * If the capture param is a `Route`, all other arguments will be ignored.\r\n * @param {module:workbox-routing~handlerCallback} [handler] A callback\r\n * function that returns a Promise resulting in a Response. This parameter\r\n * is required if `capture` is not a `Route` object.\r\n * @param {string} [method='GET'] The HTTP method to match the Route\r\n * against.\r\n * @return {module:workbox-routing.Route} The generated `Route`(Useful for\r\n * unregistering).\r\n *\r\n * @memberof module:workbox-routing\r\n */\r\nfunction registerRoute(capture, handler, method) {\r\n    let route;\r\n    if (typeof capture === 'string') {\r\n        const captureUrl = new URL(capture, location.href);\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\r\n                throw new WorkboxError('invalid-string', {\r\n                    moduleName: 'workbox-routing',\r\n                    funcName: 'registerRoute',\r\n                    paramName: 'capture',\r\n                });\r\n            }\r\n            // We want to check if Express-style wildcards are in the pathname only.\r\n            // TODO: Remove this log message in v4.\r\n            const valueToCheck = capture.startsWith('http') ?\r\n                captureUrl.pathname : capture;\r\n            // See https://github.com/pillarjs/path-to-regexp#parameters\r\n            const wildcards = '[*:?+]';\r\n            if (valueToCheck.match(new RegExp(`${wildcards}`))) {\r\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\r\n                    `character (${wildcards}). Strings are now always interpreted as ` +\r\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\r\n            }\r\n        }\r\n        const matchCallback = ({ url }) => {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if ((url.pathname === captureUrl.pathname) &&\r\n                    (url.origin !== captureUrl.origin)) {\r\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\r\n                        `${url}. This route will only handle cross-origin requests ` +\r\n                        `if they match the entire URL.`);\r\n                }\r\n            }\r\n            return url.href === captureUrl.href;\r\n        };\r\n        // If `capture` is a string then `handler` and `method` must be present.\r\n        route = new Route(matchCallback, handler, method);\r\n    }\r\n    else if (capture instanceof RegExp) {\r\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\r\n        route = new RegExpRoute(capture, handler, method);\r\n    }\r\n    else if (typeof capture === 'function') {\r\n        // If `capture` is a function then `handler` and `method` must be present.\r\n        route = new Route(capture, handler, method);\r\n    }\r\n    else if (capture instanceof Route) {\r\n        route = capture;\r\n    }\r\n    else {\r\n        throw new WorkboxError('unsupported-route-type', {\r\n            moduleName: 'workbox-routing',\r\n            funcName: 'registerRoute',\r\n            paramName: 'capture',\r\n        });\r\n    }\r\n    const defaultRouter = getOrCreateDefaultRouter();\r\n    defaultRouter.registerRoute(route);\r\n    return route;\r\n}\r\n;\r\nexport { registerRoute };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from './_private/assert.js';\r\nimport { cacheNames } from './_private/cacheNames.js';\r\nimport { WorkboxError } from './_private/WorkboxError.js';\r\nimport './_version.js';\r\n/**\r\n * Modifies the default cache names used by the Workbox packages.\r\n * Cache names are generated as `<prefix>-<Cache Name>-<suffix>`.\r\n *\r\n * @param {Object} details\r\n * @param {Object} [details.prefix] The string to add to the beginning of\r\n *     the precache and runtime cache names.\r\n * @param {Object} [details.suffix] The string to add to the end of\r\n *     the precache and runtime cache names.\r\n * @param {Object} [details.precache] The cache name to use for precache\r\n *     caching.\r\n * @param {Object} [details.runtime] The cache name to use for runtime caching.\r\n * @param {Object} [details.googleAnalytics] The cache name to use for\r\n *     `workbox-google-analytics` caching.\r\n *\r\n * @memberof module:workbox-core\r\n */\r\nfunction setCacheNameDetails(details) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        Object.keys(details).forEach((key) => {\r\n            assert.isType(details[key], 'string', {\r\n                moduleName: 'workbox-core',\r\n                funcName: 'setCacheNameDetails',\r\n                paramName: `details.${key}`,\r\n            });\r\n        });\r\n        if ('precache' in details && details['precache'].length === 0) {\r\n            throw new WorkboxError('invalid-cache-name', {\r\n                cacheNameId: 'precache',\r\n                value: details['precache'],\r\n            });\r\n        }\r\n        if ('runtime' in details && details['runtime'].length === 0) {\r\n            throw new WorkboxError('invalid-cache-name', {\r\n                cacheNameId: 'runtime',\r\n                value: details['runtime'],\r\n            });\r\n        }\r\n        if ('googleAnalytics' in details && details['googleAnalytics'].length === 0) {\r\n            throw new WorkboxError('invalid-cache-name', {\r\n                cacheNameId: 'googleAnalytics',\r\n                value: details['googleAnalytics'],\r\n            });\r\n        }\r\n    }\r\n    cacheNames.updateDetails(details);\r\n}\r\n;\r\nexport { setCacheNameDetails };\r\n"],"names":["self","_","e","messageGenerator","code","args","msg","length","JSON","stringify","WorkboxError","Error","constructor","errorCode","details","name","normalizeHandler","handler","handle","Route","match","method","RegExpRoute","regExp","url","result","exec","href","origin","location","index","slice","getFriendlyURL","urlObj","URL","String","pathname","Router","_routes","Map","this","addFetchListener","addEventListener","event","request","responsePromise","handleRequest","respondWith","addCacheListener","data","type","payload","requestPromises","Promise","all","urlsToCache","map","entry","Request","waitUntil","ports","then","postMessage","protocol","startsWith","params","route","findMatchingRoute","_defaultHandler","err","reject","_catchHandler","catch","routes","get","matchResult","Array","isArray","undefined","Object","keys","setDefaultHandler","setCatchHandler","registerRoute","has","set","push","unregisterRoute","routeIndex","indexOf","splice","defaultRouter","getOrCreateDefaultRouter","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","value","join","cacheNames","fn","key","eachCacheNameDetail","userCacheName","dontWaitFor","promise","quotaErrorCallbacks","Set","DBWrapper","version","onupgradeneeded","onversionchange","_db","_name","_version","_onupgradeneeded","_onversionchange","close","resolve","openRequestTimedOut","setTimeout","OPEN_TIMEOUT","openRequest","indexedDB","open","onerror","error","evt","transaction","abort","onsuccess","db","bind","storeName","query","getAllKeys","count","getAllMatching","includeKeys","direction","txn","done","store","objectStore","target","results","openCursor","cursor","continue","storeNames","callback","onabort","oncomplete","objStore","apply","prototype","methodsToWrap","readonly","readwrite","mode","methods","entries","IDBObjectStore","async","_call","normalizeURL","unNormalizedUrl","hash","CacheTimestampsModel","_cacheName","_handleUpgrade","createObjectStore","keyPath","createIndex","unique","deleteDatabase","onblocked","timestamp","id","_getId","put","minTimestamp","maxCount","entriesToDelete","entriesNotDeletedCount","urlsDeleted","delete","CacheExpiration","config","_isRunning","_rerunRequested","_maxEntries","maxEntries","_maxAgeSeconds","maxAgeSeconds","_timestampModel","Date","now","urlsExpired","expireEntries","cache","caches","setTimestamp","getTimestamp","Infinity","pluginUtils","plugins","callbackName","plugin","matchWrapper","matchOptions","effectiveRequest","_getEffectiveRequest","cachedResponse","pluginMethod","call","_isResponseSafeToCache","response","responseToCache","pluginsUsed","status","cacheKeyWillBeUsedPlugins","cacheWrapper","updatePlugins","oldResponse","executeQuotaErrorCallbacks","newResponse","fetchWrapper","fetchOptions","FetchEvent","preloadResponse","possiblePreloadResponse","failedFetchPlugins","originalRequest","clone","requestClone","thrownError","pluginFilteredRequest","fetchResponse","fetch","cacheOkAndOpaquePlugin","cacheWillUpdate","supportStatus","copyResponse","modifier","clonedResponse","responseInit","headers","Headers","statusText","modifiedResponseInit","body","testResponse","Response","canConstructResponseFromBodyStream","blob","createCacheKey","urlObject","cacheKey","revision","cacheKeyURL","originalURL","searchParams","PrecacheController","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","addToCacheList","urlsToWarnAbout","cacheMode","firstEntry","secondEntry","integrity","warningMessage","console","warn","toBePrecached","alreadyPrecached","alreadyCachedRequests","existingCacheKeys","precacheRequests","_addURLToCache","updatedURLs","item","notUpdatedURLs","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","credentials","cacheWillUpdatePlugin","redirected","ignoreSearch","getURLsToCacheKeys","getCachedURLs","getCacheKeyForURL","createHandler","fallbackToNetwork","matchPrecache","createHandlerBoundToURL","precacheController","getOrCreatePrecacheController","options","urlsToCacheKeys","possibleURL","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","urlWithoutIgnoredParams","paramName","some","test","removeIgnoredSearchParams","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","generateURLVariations","possibleCacheKey","listenerAdded","addRoute","precachedURL","precachePlugins","add","newPlugins","installListener","install","activateListener","activate","cachedResponseWillBeUsed","isFresh","_isResponseDateFresh","cacheExpiration","_getCacheExpiration","updateTimestampDone","updateTimestamp","cacheDidUpdate","_config","_cacheExpirations","purgeOnQuotaError","deleteCacheAndMetadata","dateHeaderTimestamp","_getDateHeaderTimestamp","dateHeader","headerTime","getTime","isNaN","_plugins","isUsingCacheWillUpdate","_fetchOptions","_matchOptions","fetchAndCachePromise","_getFromNetwork","cachePutPromise","capture","captureUrl","RegExp","moduleName","funcName"],"mappings":"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"}